[{"path":"https://nicholasjclark.github.io/mvgam/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Clark. Author, maintainer.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nicholas J. Clark, Konstans Wells (2022). Dynamic Generalized Additive Models (DGAMs) forecasting discrete ecological time series Methods Ecology Evolution DOI: https://doi.org/10.1111/2041-210X.13974","code":"@Article{,   title = {Dynamic Generalized Additive Models (DGAMs) for forecasting discrete ecological time series},   author = {Nicholas J. Clark and Konstans Wells},   journal = {Methods in Ecology and Evolution},   year = {2022},   url = {https://doi.org/10.1111/2041-210X.13974}, }"},{"path":"https://nicholasjclark.github.io/mvgam/index.html","id":"mvgam","dir":"","previous_headings":"","what":"mvgam","title":"Multivariate (Dynamic) Generalized Additive Models","text":"MultiVariate (Dynamic) Generalized Addivite Models goal mvgam use Bayesian framework estimate parameters Dynamic Generalized Additive Models (DGAMs) time series dynamic trend components. package provides interface fit Bayesian DGAMs using either JAGS Stan backend, note users strongly encouraged opt Stan JAGS. formula syntax based package mgcv provide familiar GAM modelling interface. motivation package primary objectives described detail Clark & Wells 2022 (published Methods Ecology Evolution).","code":""},{"path":"https://nicholasjclark.github.io/mvgam/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multivariate (Dynamic) Generalized Additive Models","text":"Install development version GitHub using: devtools::install_github(\"nicholasjclark/mvgam\"). Note actually condition models MCMC sampling, either JAGS software must installed (along R packages rjags runjags) Stan software must installed (along either rstan /cmdstanr). rstan listed dependency mvgam ensure installation less difficult. users wish fit models using mvgam, please refer installation links JAGS , Stan rstan , Stan cmdstandr . need fairly recent version Stan ensure model syntax recognized. see warnings variable \"array\" exist, usually sign need update version Stan. highly recommend use Cmdstan cmdstanr interface backend. Cmdstan easier install, date new features, uses less memory Rstan. See documentation Cmdstan team information.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Multivariate (Dynamic) Generalized Additive Models","text":"mvgam originally designed analyse forecast non-negative integer-valued data (counts). data traditionally challenging analyse existing time-series analysis packages. development mvgam resulted support growing number observation families extend types data. Currently, package can handle data following families: gaussian() real-valued data student_t() heavy-tailed real-valued data lognormal() non-negative real-valued data betar() proportional data (0,1) poisson() count data nb() overdispersed count data tweedie() overdispersed count data Note poisson(), nb(), tweedie() available using JAGS. families, apart tweedie(), supported using Stan. See ??mvgam_families information. simple example simulating modelling proportional data Beta observations set seasonal series independent Gaussian Process dynamic trends: Plot series see evolve time Fit DGAM series uses hierarchical cyclic seasonal smooth term capture variation seasonality among series. model also includes series-specific latent Gaussian Processes squared exponential covariance functions capture temporal dynamics Plot estimated posterior hindcast forecast distributions one series  Various S3 functions can used inspect parameter estimates, plot smooth functions residuals, evaluate models posterior predictive checks forecast comparisons. Please see package documentation detailed examples.","code":"data <- sim_mvgam(family = betar(),                  T = 80,                  trend_model = 'GP',                  trend_rel = 0.5,                   seasonality = 'shared') plot_mvgam_series(data = data$data_train, series = 'all') mod <- mvgam(y ~ s(season, bs = 'cc', k = 7) +                s(season, by = series, m = 1, k = 5),              trend_model = 'GP',              data = data$data_train,              newdata = data$data_test,              family = betar()) plot(mod, type = 'forecast', newdata = data$data_test, series = 2)"},{"path":"https://nicholasjclark.github.io/mvgam/index.html","id":"other-resources","dir":"","previous_headings":"","what":"Other resources","title":"Multivariate (Dynamic) Generalized Additive Models","text":"number case studies compiled highlight DGAMs can estimated using MCMC sampling. hosted currently RPubs following links: mvgam case study 1: model comparison data assimilation mvgam case study 2: multivariate models mvgam case study 3: distributed lag models package can also used generate necessary data structures, initial value functions modelling code necessary fit DGAMs using Stan JAGS. can helpful users wish make changes model better suit bespoke research / analysis goals. following resources can helpful troubleshoot: Stan Discourse JAGS Discourse","code":""},{"path":"https://nicholasjclark.github.io/mvgam/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Nicholas Clark Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/add_tweedie_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Tweedie JAGS modifications — add_tweedie_lines","title":"Tweedie JAGS modifications — add_tweedie_lines","text":"Tweedie JAGS modifications","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/add_tweedie_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tweedie JAGS modifications — add_tweedie_lines","text":"","code":"add_tweedie_lines(model_file, upper_bounds)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/add_tweedie_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tweedie JAGS modifications — add_tweedie_lines","text":"model_file template JAGS model file modified upper_bounds Optional upper bounds truncated observation likelihood","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/add_tweedie_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tweedie JAGS modifications — add_tweedie_lines","text":"modified JAGS model file","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/all_neon_tick_data.html","id":null,"dir":"Reference","previous_headings":"","what":"NEON Amblyomma and Ixodes tick abundance survey data — all_neon_tick_data","title":"NEON Amblyomma and Ixodes tick abundance survey data — all_neon_tick_data","text":"dataset containing timeseries Amblyomma americanum Ixodes scapularis nymph abundances NEON sites","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/all_neon_tick_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NEON Amblyomma and Ixodes tick abundance survey data — all_neon_tick_data","text":"","code":"all_neon_tick_data"},{"path":"https://nicholasjclark.github.io/mvgam/reference/all_neon_tick_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NEON Amblyomma and Ixodes tick abundance survey data — all_neon_tick_data","text":"tibble/dataframe containing covariate information alongside main fields : Year Year sampling epiWeek Epidemiological week sampling plot_ID NEON plot ID survey location siteID NEON site ID survey location amblyomma_americanum Counts . americanum nymphs ixodes_scapularis Counts . scapularis nymphs","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/all_neon_tick_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NEON Amblyomma and Ixodes tick abundance survey data — all_neon_tick_data","text":"https://www.neonscience.org/data","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/code.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the model code from an mvgam object — code","title":"Print the model code from an mvgam object — code","text":"Print model code mvgam object","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the model code from an mvgam object — code","text":"","code":"code(object)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the model code from an mvgam object — code","text":"object list object returned mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the model code from an mvgam object — code","text":"character string containing model code tidy format","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/dynamic.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining dynamic coefficients in mvgam formulae — dynamic","title":"Defining dynamic coefficients in mvgam formulae — dynamic","text":"Set time-varying (dynamic) coefficients use mvgam models. Currently, low-rank Gaussian Process smooths available estimating dynamics time-varying coefficient.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/dynamic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining dynamic coefficients in mvgam formulae — dynamic","text":"","code":"dynamic(variable, rho = 5, stationary = TRUE)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/dynamic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining dynamic coefficients in mvgam formulae — dynamic","text":"variable variable dynamic smooth function rho Positive numeric stating length scale used approximating squared exponential Gaussian Process smooth. See gp.smooth details stationary logical. TRUE (default), latent Gaussian Process smooth linear trend component. FALSE, linear trend covariate added Gaussian Process smooth. Leave TRUE believe coefficient evolving much trend, linear component basis functions can hard penalize zero. sometimes causes divergence issues Stan. See gp.smooth details","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/dynamic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defining dynamic coefficients in mvgam formulae — dynamic","text":"mvgam currently sets dynamic coefficients low-rank squared exponential Gaussian Process smooths via call s(time, = variable, bs = \"gp\", m = c(2, rho, 2)). smooths, specified reasonable values length scale parameter, give realistic sample forecasts standard splines thin plate cubic. user must set value rho, currently support estimating value mgcv. may big problem, estimating latent length scales often difficult anyway. rho parameter thought prior smoothness latent dynamic coefficient function (higher values rho lead smoother functions temporal covariance structure. Values k set automatically ensure enough basis functions used approximate expected wiggliness underlying dynamic function (k increase rho decreases)","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/evaluate_mvgams.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate forecasts from fitted mvgam objects — evaluate_mvgams","title":"Evaluate forecasts from fitted mvgam objects — evaluate_mvgams","text":"Evaluate forecasts fitted mvgam objects","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/evaluate_mvgams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate forecasts from fitted mvgam objects — evaluate_mvgams","text":"","code":"eval_mvgam(   object,   n_samples = 5000,   eval_timepoint = 3,   fc_horizon = 3,   n_cores = 2,   score = \"drps\",   log = TRUE,   weights )  roll_eval_mvgam(   object,   n_evaluations = 5,   evaluation_seq,   n_samples = 5000,   fc_horizon = 3,   n_cores = 2,   score = \"drps\",   log = TRUE,   weights )  compare_mvgams(   model1,   model2,   n_samples = 1000,   fc_horizon = 3,   n_evaluations = 10,   n_cores = 2,   score = \"drps\",   log = TRUE,   weights )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/evaluate_mvgams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate forecasts from fitted mvgam objects — evaluate_mvgams","text":"object list object returned mvgam n_samples integer specifying number samples generate model's posterior distribution eval_timepoint integer indexing timepoint represents last 'observed' set outcome data fc_horizon integer specifying length forecast horizon evaluating forecasts n_cores integer specifying number cores generating particle forecasts parallel score character specifying type ranked probability score use evaluation. Options : variogram, drps crps log logical. forecasts truths logged prior scoring? often appropriate comparing performance models series vary observation ranges weights optional vector weights (length(weights) == n_series) weighting pairwise correlations evaluating variogram score multivariate forecasts. Useful -weighting series larger magnitude observations less interest forecasting. Ignored score != 'variogram' n_evaluations integer specifying total number evaluations perform evaluation_seq Optional integer sequence specifying exact set timepoints evaluating model's forecasts. sequence values <3 > max(training timepoints) - fc_horizon model1 list object returned mvgam representing first model evaluated model2 list object returned mvgam representing second model evaluated","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/evaluate_mvgams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate forecasts from fitted mvgam objects — evaluate_mvgams","text":"eval_mvgam, list object containing information specific evaluations series (using drps crps score) vector scores using variogram. roll_eval_mvgam, list object containing information specific evaluations series well total evaluation summary (taken summing forecast score series evaluation averaging coverages evaluation) compare_mvgams, series plots comparing forecast Rank Probability Scores competing model. lower score preferred. Note however possible select model ultimately perform poorly true --sample forecasting. example wiggly smooth function 'year' included model function learned prior evaluating rolling window forecasts, model generate tight predictions result. forecasting ahead timepoints model seen (.e. next year), smooth function end extrapolating, sometimes strange unexpected ways. therefore recommended use smooth functions covariates adequately measured data (.e. 'seasonality', example) reduce possible extrapolation smooths let latent trends mvgam model capture temporal dependencies data. trends time series models provide much stable forecasts","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/evaluate_mvgams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate forecasts from fitted mvgam objects — evaluate_mvgams","text":"eval_mvgam generates set samples representing fixed parameters estimated full mvgam model latent trend states given point time. trends rolled forward total fc_horizon timesteps according estimated state space dynamics generate '--sample' forecast evaluated true observations horizon window. function therefore simulates situation model's parameters already estimated observed data evaluation timepoint like generate forecasts latent trends observed timepoint. Evaluation involves calculating appropriate Rank Probability Score binary indicator whether true value lies within forecast's 90% prediction interval roll_eval_mvgam sets sequence evaluation timepoints along rolling window iteratively calls eval_mvgam evaluate '--sample' forecasts. Evaluation involves calculating Discrete Rank Probability Score binary indicator whether true value lies within forecast's 90% prediction interval compare_mvgams automates evaluation compare two fitted models using rolling window forecast evaluation provides series summary plots facilitate model selection. essentially wrapper roll_eval_mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/forecast.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute out of sample forecasts for a fitted mvgam object — forecast.mvgam","title":"Compute out of sample forecasts for a fitted mvgam object — forecast.mvgam","text":"Compute sample forecasts fitted mvgam object","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/forecast.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute out of sample forecasts for a fitted mvgam object — forecast.mvgam","text":"","code":"# S3 method for mvgam forecast(   object,   newdata,   data_test,   series = \"all\",   n_cores = 1,   type = \"response\" )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/forecast.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute out of sample forecasts for a fitted mvgam object — forecast.mvgam","text":"object list object returned mvgam newdata Optional dataframe list test data containing least 'series' 'time' addition variables included linear predictor original formula. included, covariate information newdata used generate forecasts fitted model equations. newdata originally included call mvgam, forecasts already produced generative model simply extracted plotted. However newdata supplied original model call, assumption made newdata supplied comes sequentially data supplied data original model (.e. assume time gap last observation series 1 data first observation series 1 newdata). data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows series Either integer specifying series set forecast, character string '', specifying series forecast. preferable fitted model contained multivariate trends (either dynamic factor VAR process), saves recomputing full set trends series individually n_cores integer specifying number cores generating forecasts parallel type value link, linear predictor calculated log link scale. response used, predictions take uncertainty observation process account return predictions outcome (discrete) scale (default). trend used, forecast distribution latent trend returned.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/forecast.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute out of sample forecasts for a fitted mvgam object — forecast.mvgam","text":"object class mvgam_forecast containing hindcast forecast distributions required series","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/forecast.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute out of sample forecasts for a fitted mvgam object — forecast.mvgam","text":"Posterior predictions drawn fitted mvgam used simulate forecast distribution","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_monitor_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Return parameters to monitor during modelling — get_monitor_pars","title":"Return parameters to monitor during modelling — get_monitor_pars","text":"Return parameters monitor modelling","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_monitor_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return parameters to monitor during modelling — get_monitor_pars","text":"","code":"get_monitor_pars(family, smooths_included = TRUE, use_lv, trend_model, drift)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_monitor_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return parameters to monitor during modelling — get_monitor_pars","text":"family character smooths_included Logical. smooth terms included model formula? use_lv Logical (use latent variable trends ) trend_model type trend model used drift Logical (drift term estimated )","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_monitor_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return parameters to monitor during modelling — get_monitor_pars","text":"string parameters monitor","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"function lists parameters can prior distributions changed given mvgam model, well listing default distributions","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"","code":"get_mvgam_priors(   formula,   data,   data_train,   family = \"poisson\",   use_lv = FALSE,   n_lv,   use_stan = TRUE,   trend_model = \"None\",   drift = FALSE )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"formula character string specifying GAM formula. exactly like formula GLM except smooth terms, s, te, ti t2, can added right hand side specify linear predictor depends smooth functions predictors (linear functionals ) data dataframe list containing model response variable covariates required GAM formula. include columns: 'y' (discrete outcomes; NAs allowed) 'series' (character factor index series IDs) 'time' (numeric index time point observation). variables included linear predictor formula must also present data_train Deprecated. Still works place data users recommended use data instead seamless integration R workflows family character. Must either 'nb' (Negative Binomial), 'tw' (Tweedie) 'poisson' use_lv logical. TRUE, use dynamic factors estimate series' latent trends reduced dimension format. FALSE, estimate independent latent trends series n_lv integer number latent dynamic factors use use_lv == TRUE. >n_series. Defaults arbitrarily min(2, floor(n_series / 2)) use_stan Logical. TRUE rstan installed, model compiled sampled using Hamiltonian Monte Carlo call cmdstan_model , cmdstanr available, call stan. Note functionality still development options available JAGS can used, including: option Tweedie family option dynamic factor trends. However, Stan can estimate Hilbert base approximate Gaussian Processes, much computationally tractable full GPs time series >100 observations, estimation Stan can support latent GP trends estimation JAGS trend_model character specifying time series dynamics latent trend. Options : 'None' (latent trend component; .e. GAM component contributes linear predictor, observation process source error; similarly estimated gam), 'RW' (random walk possible drift), 'AR1' (AR1 model intercept), 'AR2' (AR2 model intercept) 'AR3' (AR3 model intercept) 'VAR1' (possible drift; available Stan) 'GP' (Gaussian Process squared exponential kernel; available estimation Stan) drift logical estimate drift parameter latent trend components. Useful latent trend expected broadly follow non-zero slope. Note latent trend less stationary, drift parameter can become unidentifiable, especially intercept term included GAM linear predictor (default calling jagam). Therefore defaults FALSE","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"either data.frame containing prior definitions (suitable priors can altered user) NULL, indicating priors model can modified mvgam interface","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"Users can supply model formula, prior fitting model, default priors can inspected altered. make alterations, change contents prior column supplying data.frame mvgam function using argument priors. using Stan backend, users can also modify parameter bounds modifying new_lowerbound /new_upperbound columns. necessary using restrictive distributions parameters, Beta distribution trend sd parameters example (Beta support  (0,1)), upperbound 1","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"prior, new_lowerbound /new_upperbound columns output altered defining user-defined priors mvgam model. Use familiar underlying probabilistic programming language. sanity checks done ensure code legal (.e. check lower bounds smaller upper bounds, example)","code":""},{"path":[]},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/get_mvgam_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information on default prior distributions for an mvgam model — get_mvgam_priors","text":"","code":"# Simulate three integer-valued time series library(mvgam) dat <- sim_mvgam(trend_rel = 0.5)  # Get a model file that uses default mvgam priors for inspection (not always necessary, # but this can be useful for testing whether your updated priors are written correctly) mod_default <- mvgam(y ~ s(series, bs = 're') +               s(season, bs = 'cc') - 1,               family = 'nb',               data = dat$data_train,               trend_model = 'AR2',               priors = test_priors,               run_model = FALSE) #> Error in update_priors(vectorised$model_file, priors, use_stan = TRUE): object 'test_priors' not found  # Inspect the model file with default mvgam priors mod_default$model_file #> Error in eval(expr, envir, enclos): object 'mod_default' not found  # Look at which priors can be updated in mvgam test_priors <- get_mvgam_priors(y ~ s(series, bs = 're') +                                 s(season, bs = 'cc') - 1,                                 family = 'nb',                                 data = dat$data_train,                                 trend_model = 'AR2') test_priors #>                                    param_name param_length #> 1               vector<lower=0>[n_sp] lambda;            2 #> 2                           vector[1] mu_raw;            1 #> 3               vector<lower=0>[1] sigma_raw;            1 #> 4 vector<lower=-1.5,upper=1.5>[n_series] ar1;            3 #> 5 vector<lower=-1.5,upper=1.5>[n_series] ar2;            3 #> 6            vector<lower=0>[n_series] sigma;            3 #> 7          vector<lower=0>[n_series] phi_inv;            3 #>                    param_info                           prior #> 1 s(season) smooth parameters        lambda ~ normal(10, 25); #> 2          s(series) pop mean          mu_raw ~ std_normal(); #> 3            s(series) pop sd   sigma_raw ~ exponential(0.5); #> 4       trend AR1 coefficient             ar1 ~ std_normal(); #> 5       trend AR2 coefficient             ar2 ~ std_normal(); #> 6                    trend sd         sigma ~ exponential(2); #> 7   inverse of NB dispsersion phi_inv ~ student_t(3, 0, 0.1); #>                   example_change new_lowerbound new_upperbound #> 1    lambda ~ exponential(0.05);             NA             NA #> 2  mu_raw ~ normal(-0.44, 0.11);             NA             NA #> 3 sigma_raw ~ exponential(0.93);             NA             NA #> 4      ar1 ~ normal(0.27, 0.26);             NA             NA #> 5      ar2 ~ normal(-0.1, 0.63);             NA             NA #> 6     sigma ~ exponential(0.03);             NA             NA #> 7  phi_inv ~ normal(0.08, 0.48);             NA             NA  # Make a few changes; first, change the population mean for the series-level # random intercepts test_priors$prior[1] <- 'mu_raw1 ~ dnorm(-1, 2)'  # Now use stronger regularisation for the series-level AR2 coefficients test_priors$prior[4] <- 'ar2[s] ~ dnorm(0, 20)'  # Check whether the notation in the 'prior' column is correct (note, this function # will not check that densities are correctly spelled and parameterised, that is up # to the user!) update_priors(model_file = mod_default$model_file,               priors = test_priors) #> Error in update_priors(model_file = mod_default$model_file, priors = test_priors): could not find function \"update_priors\"  # No warnings, the model is ready for fitting now in the usual way with the addition # of the 'priors' argument: # mod <- mvgam(y ~ s(series, bs = 're') + #                s(season, bs = 'cc') - 1, #              family = 'nb', #              data = dat$data_train, #              trend_model = 'AR2', #              priors = test_priors)  # Look at what is returned when an incorrect spelling is used test_priors$prior[4] <- 'ar2_bananas ~ dnorm(0, 20)' update_priors(model_file = mod_default$model_file,               priors = test_priors) #> Error in update_priors(model_file = mod_default$model_file, priors = test_priors): could not find function \"update_priors\""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"Approximate leave-future-cross-validation fitted mvgam objects","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"","code":"# S3 method for mvgam lfo_cv(   object,   data,   min_t,   fc_horizon = 1,   pareto_k_threshold = 0.7,   n_cores = 1 )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"object list object returned mvgam data dataframe list containing model response variable covariates required GAM formula. include columns: 'series' (character factor index series IDs) 'time' (numeric index time point observation). variables included linear predictor formula must also present min_t Integer specifying minimum training time required making predictions data. Default either 30, whatever training time allows least 10 lfo-cv calculations (.e. pmin(max(data$time) - 10, 30)) fc_horizon Integer specifying number time steps ahead evaluating forecasts pareto_k_threshold Proportion specifying threshold Pareto shape parameter considered unstable, triggering model refit. Default 0.7 n_cores integer specifying number cores calculating likelihoods parallel","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"list class mvgam_lfo containing approximate ELPD scores, Pareto-k shape values 'specified pareto_k_threshold","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"Approximate leave-future-cross-validation uses expanding training window scheme evaluate model forecasting ability. steps used function mirror laid lfo vignette loo package, written Paul Bürkner, Jonah Gabry, Aki Vehtari. First, refit model using first min_t observations perform single exact fc_horizon-ahead forecast step. forecast evaluated min_t + fc_horizon sample observations using Expected Log Predictive Density (ELPD). Next, approximate successive round expanding window forecasts moving forward one step time 1:N_evaluations re-weighting draws model's posterior predictive distribution using Pareto Smoothed Importance Sampling (PSIS). iteration , PSIS weights obtained next observation included model re-fit (.e. last observation training data, min_t + ). importance ratios stable, consider approximation adequate use re-weighted posterior's forecast evaluating next holdout set testing observations ((min_t + + 1):(min_t + + fc_horizon)). point importance ratio variability become large importance sampling fail. indicated estimated shape parameter k generalized Pareto distribution crossing certain threshold pareto_k_threshold. refit model using observations time failure. restart process iterate forward next refit triggered (Bürkner et al. 2020).","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"Paul-Christian Bürkner, Jonah Gabry & Aki Vehtari (2020). Approximate leave-future-cross-validation Bayesian time series models Journal Statistical Computation Simulation. 90:14, 2499-2523.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lfo_cv.mvgam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximate leave-future-out cross-validation of fitted mvgam objects — lfo_cv.mvgam","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/logLik.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute pointwise Log-Likelihoods from fitted mvgam objects — logLik.mvgam","title":"Compute pointwise Log-Likelihoods from fitted mvgam objects — logLik.mvgam","text":"Compute pointwise Log-Likelihoods fitted mvgam objects","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/logLik.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute pointwise Log-Likelihoods from fitted mvgam objects — logLik.mvgam","text":"","code":"# S3 method for mvgam logLik(object, n_cores = 1)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/logLik.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute pointwise Log-Likelihoods from fitted mvgam objects — logLik.mvgam","text":"object list object returned mvgam n_cores integer specifying number cores calculating likelihoods parallel","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/logLik.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute pointwise Log-Likelihoods from fitted mvgam objects — logLik.mvgam","text":"matrix dimension n_samples x n_observations containing pointwise log-likelihood draws observations (training observations , supplied original model via newdata argument mvgam, testing observations)","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lv_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate trend correlations based on mvgam latent factor loadings — lv_correlations","title":"Calculate trend correlations based on mvgam latent factor loadings — lv_correlations","text":"function uses samples latent trends series fitted mvgam model calculates correlations among series' trends","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lv_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate trend correlations based on mvgam latent factor loadings — lv_correlations","text":"","code":"lv_correlations(object)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/lv_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate trend correlations based on mvgam latent factor loadings — lv_correlations","text":"object list object returned mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/lv_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate trend correlations based on mvgam latent factor loadings — lv_correlations","text":"list object containing mean posterior correlations full array posterior correlations","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"function estimates posterior distribution Generalised Additive Models (GAMs) can include smooth spline functions, specified GAM formula, well latent temporal processes, specified trend_model. currently two options specifying structures trends (either latent dynamic factors capture trend dependencies among series reduced dimension format, independent trends)","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"","code":"mvgam(   formula,   knots,   data,   data_train,   newdata,   data_test,   run_model = TRUE,   prior_simulation = FALSE,   return_model_data = FALSE,   family = \"poisson\",   use_lv = FALSE,   n_lv,   trend_model = \"None\",   drift = FALSE,   chains = 4,   burnin = 500,   samples = 500,   thin = 1,   parallel = TRUE,   threads = 1,   priors,   upper_bounds,   refit = FALSE,   use_stan = TRUE,   max_treedepth,   adapt_delta,   jags_path )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"formula character string specifying GAM formula. exactly like formula GLM except smooth terms, s, te, ti t2, can added right hand side specify linear predictor depends smooth functions predictors (linear functionals ). knots optional list containing user specified knot values used basis construction. bases user simply supplies knots used, must match k value supplied (note number knots always just k). Different terms can use different numbers knots, unless share covariate. data dataframe list containing model response variable covariates required GAM formula. include columns: 'series' (character factor index series IDs) 'time' (numeric index time point observation). variables included linear predictor formula must also present data_train Deprecated. Still works place data users recommended use data instead seamless integration R workflows newdata Optional dataframe list test data containing least 'series' 'time' addition variables included linear predictor formula. included, observations variable y set NA fitting model posterior simulations can obtained data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows run_model logical. FALSE, model fitted instead function return model file data / initial values needed fit model outside mvgam prior_simulation logical. TRUE, observations fed model, instead simulations prior distributions returned return_model_data logical. TRUE, list data needed fit model returned, along initial values smooth AR parameters, model fitted. helpful users wish modify model file add stochastic elements currently avaiable mvgam. Default FALSE reduce size returned object, unless run_model == FALSE family family specifying exponential observation family series. Currently supported families : nb(), poisson(), tweedie(), gaussian(), betar(), lognormal(), student_t() Gamma() use_lv logical. TRUE, use dynamic factors estimate series' latent trends reduced dimension format. FALSE, estimate independent latent trends series n_lv integer number latent dynamic factors use use_lv == TRUE. >n_series. Defaults arbitrarily min(2, floor(n_series / 2)) trend_model character specifying time series dynamics latent trend. Options : 'None' (latent trend component; .e. GAM component contributes linear predictor, observation process source error; similarly estimated gam), 'RW' (random walk possible drift), 'AR1' (possible drift), 'AR2' (possible drift) 'AR3' (possible drift) 'VAR1' (possible drift; available Stan) 'GP' (Gaussian Process squared exponential kernel; available stan) drift logical estimate drift parameter latent trend components. Useful latent trend expected broadly follow non-zero slope. Note latent trend less stationary, drift parameter can become unidentifiable, especially intercept term included GAM linear predictor (default calling jagam). Therefore defaults FALSE chains integer specifying number parallel chains model burnin integer specifying number warmup iterations Markov chain run tune sampling algorithms samples integer specifying number post-warmup iterations Markov chain run sampling posterior distribution thin Thinning interval monitors parallel logical specifying whether multiple cores used generating MCMC simulations parallel. TRUE, number cores use min(c(chains, parallel::detectCores() - 1)) threads integer Experimental option use multithreading within-chain parallelisation Stan. recommend use experienced Stan's reduce_sum function slow running model sped means. available using Cmdstan backend priors optional data.frame prior definitions (JAGS Stan syntax). See get_mvgam_priors 'Details' information changing default prior distributions upper_bounds Optional vector integer values specifying upper limits series. supplied, generates modified likelihood values bound given likelihood zero. Note modification computationally expensive JAGS can lead better estimates true bounds exist. Default remove truncation entirely (.e. upper bound series) refit Logical indicating whether refit, called using update.mvgam. Users leave FALSE use_stan Logical. TRUE rstan installed, model compiled sampled using Hamiltonian Monte Carlo call cmdstan_model , cmdstanr available, call stan. Note many options using Stan vs JAGS (\"advantage\" JAGS ability use Tweedie family). max_treedepth positive integer placing cap number simulation steps evaluated iteration use_stan == TRUE. Default 12. Increasing value can sometimes help exploration complex posterior geometries, rarely fruitful go max_treedepth 14 adapt_delta positive numeric 0 1 defining target average proposal acceptance probability Stan's adaptation period, use_stan == TRUE. Default 0.8. general need change adapt_delta unless see warning message divergent transitions, case can increase adapt_delta default value closer 1 (e.g. 0.95 0.99, 0.99 0.999, etc). step size used numerical integrator function adapt_delta increasing adapt_delta result smaller step size fewer divergences. Increasing adapt_delta typically result slower sampler, always lead robust sampler. jags_path Optional character vector specifying path location JAGS executable (.exe) use modelling use_stan == FALSE. missing, path recovered call findjags","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"list object class mvgam containing model output, text representation model file, mgcv model output (easily generating simulations unsampled covariate values), Dunn-Smyth residuals series key information needed functions package","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"Dynamic GAMs useful wish predict future values time series show temporal dependence want rely extrapolating smooth term (can sometimes lead unpredictable unrealistic behaviours). addition, smooths can often try wiggle excessively capture autocorrelation present time series, exacerbates problem forecasting ahead. GAMs naturally viewed Bayesian lens, often must model time series show complex distributional features missing data, parameters mvgam models estimated Bayesian framework using Markov Chain Monte Carlo. Priors: jagam model file generated formula modified include latent temporal processes. Prior distributions important model parameters can altered user inspect model sensitivities given priors (see get_mvgam_priors details). Note latent trends estimated log scale choose tau, AR phi priors accordingly. However control model specification can accomplished first using mvgam baseline, editing returned model accordingly. model file can edited run outside mvgam setting run_model = FALSE encouraged complex modelling tasks. Note, priors formally checked ensure right syntax respective probabilistic modelling framework, user ensure correct (.e. use dnorm normal densities JAGS, mean precision parameterisation; use normal normal densities Stan, mean standard deviation parameterisation) Random effects: smooth terms using random effect basis (smooth.construct.re.smooth.spec), non-centred parameterisation automatically employed avoid degeneracies common hierarchical models. Note however centred versions may perform better series particularly informative, foray Bayesian modelling, worth building understanding model's assumptions limitations following principled workflow. Also note models parameterised using drop.unused.levels = FALSE jagam ensure predictions can made levels supplied factor variable Overdispersion parameters: one series included data_train overdispersed exponential family used, default overdispersion parameters (r Negative Binomial, twdis Tweedie) estimated independently series. Note Tweedie models, estimating power parameter p alongside overdispersion parameter twdis smooth coefficients challenging noisy data, introducing difficult posterior geometries. p parameter therefore fixed 1.5 (.e. -called Geometric Poisson model). Factor regularisation: using dynamic factor model trends JAGS factor precisions given regularized penalty priors theoretically allow factors dropped model squeezing increasing factors' variances zero. done help protect selecting many latent factors needed capture dependencies data, can often advantageous set n_lv slightly larger number. However larger numbers factors come additional computational costs balanced well. using Stan, factors parameterised sd = 0.1 Residuals: series, randomized quantile (.e. Dunn-Smyth) residuals calculated inspecting model diagnostics fitted model appropriate Dunn-Smyth residuals standard normal distribution autocorrelation evident. particular observation missing, residual calculated comparing independent draws model's posterior distribution Using Stan: mvgam primarily designed use Hamiltonian Monte Carlo parameter estimation via software Stan (using either cmdstanr rstan interface). great advantages using Stan Gibbs / Metropolis Hastings samplers, includes option estimate smooth latent trends via Hilbert space approximate Gaussian Processes. often makes sense ecological series, expect change smoothly. mvgam, latent squared exponential GP trends approximated using default 40 basis functions, saves computational costs compared fitting full GPs adequately estimating GP alpha rho parameters. many advantages Stan JAGS, development package applied Stan. includes planned addition response distributions, plans handle zero-inflation, plans incorporate greater variety trend models. Users strongly encouraged opt Stan JAGS proceeding workflows","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"Nicholas J Clark & Konstans Wells (2020). Dynamic generalised additive models (DGAMs) forecasting discrete ecological time series Methods Ecology Evolution. 14:3, 771-784.","code":""},{"path":[]},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Bayesian dynamic GAM to a univariate or multivariate set of discrete time series — mvgam","text":"","code":"# \\donttest{ # Simulate a collection of three time series that have shared seasonal dynamics dat <- sim_mvgam(T = 80, n_series = 3, prop_missing = 0.1,                 trend_rel = 0.6)  # Plot key summary statistics for a single series plot_mvgam_series(data = dat$data_train, series = 1)   # Plot all series together plot_mvgam_series(data = dat$data_train, series = 'all')   # Formulate a model using Stan where series share a cyclic smooth for # seasonality and each series has an independent random walk temporal process; # Set run_model = FALSE to inspect the returned objects mod1 <- mvgam(formula = y ~ s(season, bs = 'cc'),              data = dat$data_train,              trend_model = 'RW',              family = 'poisson',              use_stan = TRUE,              run_model = FALSE)  # View the model code in Stan language code(mod1) #> // Stan model code generated by package mvgam #> data { #>   int<lower=0> total_obs; // total number of observations #>   int<lower=0> n; // number of timepoints per series #>   int<lower=0> n_sp; // number of smoothing parameters #>   int<lower=0> n_series; // number of series #>   int<lower=0> num_basis; // total number of basis coefficients #>   vector[num_basis] zero; // prior locations for basis coefficients #>   real p_taus[1]; // prior precisions for parametric coefficients #>   real p_coefs[1]; // prior locations for parametric coefficients #>   matrix[total_obs, num_basis] X; // mgcv GAM design matrix #>   int<lower=0> ytimes[n, n_series]; // time-ordered matrix (which col in X belongs to each [time, series] observation?) #>   matrix[8,8] S1; // mgcv smooth penalty matrix S1 #>   int<lower=0> n_nonmissing; // number of nonmissing observations #>   int<lower=0> flat_ys[n_nonmissing]; // flattened nonmissing observations #>   matrix[n_nonmissing, num_basis] flat_xs; // X values for nonmissing observations #>   int<lower=0> obs_ind[n_nonmissing]; // indices of nonmissing observations #> } #> parameters { #>   // raw basis coefficients #>   vector[num_basis] b_raw; #>   // latent trend variance parameters #>   vector<lower=0>[n_series] sigma; #>   // latent trends #>   matrix[n, n_series] trend; #>   // smoothing parameters #>   vector<lower=0>[n_sp] lambda; #> } #> transformed parameters { #>   // basis coefficients #>   vector[num_basis] b; #>   b[1:num_basis] = b_raw[1:num_basis]; #> } #> model { #>   // parametric effect priors (regularised for identifiability) #>   for (i in 1:1) { #>   b_raw[i] ~ normal(p_coefs[i], sqrt(1 / p_taus[i])); #>   } #>   // prior for s(season)... #>   b_raw[2:9] ~ multi_normal_prec(zero[2:9],S1[1:8,1:8] * lambda[1]); #>   // priors for smoothing parameters #>   lambda ~ normal(10, 25); #>   // priors for latent trend variance parameters #>   sigma ~ exponential(2); #>   // trend estimates #>   trend[1, 1:n_series] ~ normal(0, sigma); #>   for(s in 1:n_series){ #>   trend[2:n, s] ~ normal(trend[1:(n - 1), s], sigma[s]); #>   } #>   { #>   // likelihood functions #>   vector[n_nonmissing] flat_trends; #>   flat_trends = (to_vector(trend))[obs_ind]; #>   flat_ys ~ poisson_log_glm(append_col(flat_xs, flat_trends), #>   0.0,append_row(b, 1.0)); #>   } #> } #> generated quantities { #>   vector[total_obs] eta; #>   matrix[n, n_series] mus; #>   vector[n_sp] rho; #>   vector[n_series] tau; #>   array[n, n_series] int ypred; #>   rho = log(lambda); #>   for (s in 1:n_series) { #>   tau[s] = pow(sigma[s], -2.0); #>   } #>   // posterior predictions #>   eta = X * b; #>   for(s in 1:n_series){  #>   mus[1:n, s] = eta[ytimes[1:n, s]] + trend[1:n, s]; #>   ypred[1:n, s] = poisson_log_rng(mus[1:n, s]); #>   } #> }  # Inspect the data objects needed to condition the model str(mod1$model_data) #> List of 18 #>  $ y           : num [1:60, 1:3] 1 1 2 2 2 1 1 1 0 2 ... #>  $ n           : int 60 #>  $ X           : num [1:180, 1:9] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:9] \"X.Intercept.\" \"V2\" \"V3\" \"V4\" ... #>  $ S1          : num [1:8, 1:8] 1.019 -0.421 0.409 0.109 0.18 ... #>  $ zero        : num [1:9] 0 0 0 0 0 0 0 0 0 #>  $ p_coefs     : num [1(1d)] 0.606 #>  $ p_taus      : num [1(1d)] 69.1 #>  $ ytimes      : int [1:60, 1:3] 1 4 7 10 13 16 19 22 25 28 ... #>  $ n_series    : int 3 #>  $ sp          : Named num 94.6 #>   ..- attr(*, \"names\")= chr \"s(season)\" #>  $ y_observed  : num [1:60, 1:3] 1 1 1 1 1 1 1 1 1 1 ... #>  $ total_obs   : int 180 #>  $ num_basis   : int 9 #>  $ n_sp        : num 1 #>  $ n_nonmissing: int 166 #>  $ obs_ind     : int [1:166] 1 2 3 4 5 6 7 8 9 10 ... #>  $ flat_ys     : num [1:166] 1 1 2 2 2 1 1 1 0 2 ... #>  $ flat_xs     : num [1:166, 1:9] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:9] \"X.Intercept.\" \"V2\" \"V3\" \"V4\" ...  # Inspect the initial value function used to initialise the MCMC chains mod1$inits #> function ()  #> { #>     list(b_raw = runif(model_data$num_basis, -2, 2)) #> } #> <bytecode: 0x000001e2d9a169d8> #> <environment: 0x000001e2df743480>  # The following code can be used to run the model outside of mvgam; first using rstan model_data <- mod1$model_data library(rstan) fit <- stan(model_code = mod1$model_file,            data = model_data,            init = mod1$inits) #> Warning: incomplete final line found on 'C:/Users/Nick/Documents/.R/Makevars.win' #> Error in family_inits(family = family_char, trend_model, smooths_included,     model_data): object 'model_data' not found  # Now using cmdstanr library(cmdstanr) #> This is cmdstanr version 0.5.3 #> - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr #> - CmdStan path: C:/Users/Nick/Documents/.cmdstan/cmdstan-2.32.0 #> - CmdStan version: 2.32.0 #>  #> A newer version of CmdStan is available. See ?install_cmdstan() to install it. #> To disable this check set option or environment variable CMDSTANR_NO_VER_CHECK=TRUE. model_data <- mod1$model_data cmd_mod <- cmdstan_model(write_stan_file(mod1$model_file),                         stanc_options = list('canonicalize=deprecations,braces,parentheses')) #> In file included from stan/lib/stan_math/lib/boost_1.78.0/boost/multi_array/multi_array_ref.hpp:32, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/multi_array.hpp:34, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/numeric/odeint/algebra/multi_array_algebra.hpp:22, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/numeric/odeint.hpp:63, #>                  from stan/lib/stan_math/stan/math/prim/functor/ode_rk45.hpp:9, #>                  from stan/lib/stan_math/stan/math/prim/functor/integrate_ode_rk45.hpp:6, #>                  from stan/lib/stan_math/stan/math/prim/functor.hpp:15, #>                  from stan/lib/stan_math/stan/math/rev/fun.hpp:198, #>                  from stan/lib/stan_math/stan/math/rev.hpp:10, #>                  from stan/lib/stan_math/stan/math.hpp:19, #>                  from stan/src/stan/model/model_header.hpp:4, #>                  from C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50393c1258.hpp:2: #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:180:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   180 |         : public boost::functional::detail::unary_function<typename unary_traits<Predicate>::argument_type,bool> #>       |                                             ^~~~~~~~~~~~~~ #> In file included from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/string:48, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/locale_classes.h:40, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/ios_base.h:41, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/ios:42, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/istream:38, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/sstream:38, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/complex:45, #>                  from stan/lib/stan_math/lib/eigen_3.4.0/Eigen/Core:50, #>                  from stan/lib/stan_math/lib/eigen_3.4.0/Eigen/Dense:1, #>                  from stan/lib/stan_math/stan/math/prim/fun/Eigen.hpp:22, #>                  from stan/lib/stan_math/stan/math/rev.hpp:4: #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:214:45: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   214 |         : public boost::functional::detail::binary_function< #>       |                                             ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:252:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   252 |         : public boost::functional::detail::unary_function< #>       |                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_ma #> th/lib/boost_1.78.0/boost/functional.hpp:299:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   299 |         : public boost::functional::detail::unary_function< #>       |                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:345:57: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   345 |     class mem_fun_t : public boost::functional::detail::unary_function<T*, S> #>       |                                                         ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:361:58: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   361 |     class mem_fun1_t : public boost::functional::detail::binary_function<T*, A, S> #>       |                                                          ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:377:63: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   377 |     class const_mem_fun_t : public boost::functional::detail::unary_function<const T*, S> #>       |                                                               ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |    #>          ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:393:64: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   393 |     class const_mem_fun1_t : public boost::functional::detail::binary_function<const T*, A, S> #>       |                                                                ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:438:61: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   438 |     class mem_fun_ref_t : public boost::functional::detail::unary_function<T&, S> #>       |                                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:454:62: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   454 |     class mem_fun1_ref_t : public boost::functional::detail::binary_function<T&, A, S> #>       |                                                              ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:470:67: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   470 |     class const_mem_fun_ref_t : public boost::functional::detail::unary_function<const T&, S> #>       |                                                                   ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:487:68: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   487 |     class const_mem_fun1_ref_t : public boost::functional::detail::binary_function<const T&, A, S> #>       |                                                                    ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ #> ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:533:73: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   533 |     class pointer_to_unary_function : public boost::functional::detail::unary_function<Arg,Result> #>       |                                                                         ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:557:74: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   557 |     class pointer_to_binary_function : public boost::functional::detail::binary_function<Arg1,Arg2,Result> #>       |                                                                          ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ cmd_mod$print() #>  #> // Stan model code generated by package mvgam #> data { #> int<lower=0> total_obs; // total number of observations #> int<lower=0> n; // number of timepoints per series #> int<lower=0> n_sp; // number of smoothing parameters #> int<lower=0> n_series; // number of series #> int<lower=0> num_basis; // total number of basis coefficients #> vector[num_basis] zero; // prior locations for basis coefficients #> real p_taus[1]; // prior precisions for parametric coefficients #> real p_coefs[1]; // prior locations for parametric coefficients #> matrix[total_obs, num_basis] X; // mgcv GAM design matrix #> int<lower=0> ytimes[n, n_series]; // time-ordered matrix (which col in X belongs to each [time, series] observation?) #> matrix[8,8] S1; // mgcv smooth penalty matrix S1 #> int<lower=0> n_nonmissing; // number of nonmissing observations #> int<lower=0> flat_ys[n_nonmissing]; // flattened nonmissing observations #> matrix[n_nonmissing, num_basis] flat_xs; // X values for nonmissing observations #> int<lower=0> obs_ind[n_nonmissing]; // indices of nonmissing observations #> } #> parameters { #> // raw basis coefficients #> vector[num_basis] b_raw; #>  #> // latent trend variance parameters #> vector<lower=0>[n_series] sigma; #>  #> // latent trends #> matrix[n, n_series] trend; #>  #> // smoothing parameters #> vector<lower=0>[n_sp] lambda; #> } #>  #> transformed parameters { #> // basis coefficients #> vector[num_basis] b; #>  #> b[1:num_basis] = b_raw[1:num_basis]; #> } #>  #> model { #> // parametric effect priors (regularised for identifiability) #> for (i in 1:1) { #> b_raw[i] ~ normal(p_coefs[i], sqrt(1 / p_taus[i])); #> } #>  #> // prior for s(season)... #> b_raw[2:9] ~ multi_normal_prec(zero[2:9],S1[1:8,1:8] * lambda[1]); #>  #> // priors for smoothing parameters #> lambda ~ normal(10, 25); #>  #> // priors for latent trend variance parameters #> sigma ~ exponential(2); #>  #> // trend estimates #> trend[1, 1:n_series] ~ normal(0, sigma); #> for(s in 1:n_series){ #> trend[2:n, s] ~ normal(trend[1:(n - 1), s], sigma[s]); #> } #> { #> // likelihood functions #> vector[n_nonmissing] flat_trends; #> flat_trends = (to_vector(trend))[obs_ind]; #> flat_ys ~ poisson_log_glm(append_col(flat_xs, flat_trends), #> 0.0,append_row(b, 1.0)); #> } #> } #>  #>  #> generated quantities { #> vector[total_obs] eta; #> matrix[n, n_series] mus; #> vector[n_sp] rho; #> vector[n_series] tau; #> array[n, n_series] int ypred; #> rho = log(lambda); #> for (s in 1:n_series) { #> tau[s] = pow(sigma[s], -2.0); #> } #>  #> // posterior predictions #> eta = X * b; #> for(s in 1:n_series){  #> mus[1:n, s] = eta[ytimes[1:n, s]] + trend[1:n, s]; #> ypred[1:n, s] = poisson_log_rng(mus[1:n, s]); #> } #> } #>  fit <- cmd_mod$sample(data = model_data,                      chains = 4,                      parallel_chains = 4,                      refresh = 100,                      init = mod1$inits) #> Warning: restarting interrupted promise evaluation #> Error in family_inits(family = family_char, trend_model, smooths_included,     model_data): object 'model_data' not found  # Now fit the model using mvgam with the Stan backend mod1 <- mvgam(formula = y ~ s(season, bs = 'cc'),               data = dat$data_train,               trend_model = 'RW',               family = poisson(),               use_stan = TRUE) #> Using cmdstanr as the backend #>  #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #>  - chain 1: sigma, trend, lambda #>  - chain 2: sigma, trend, lambda #>  - chain 3: sigma, trend, lambda #>  - chain 4: sigma, trend, lambda #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 9.67096e+26, but Precision matrix[8,2] = 9.67096e+26 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50393c1258.stan', line 48, column 0 to column 66) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 7.18438e+113, but Precision matrix[8,2] = 7.18438e+113 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50393c1258.stan', line 48, column 0 to column 66) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 3 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 8.29854e+12, but Precision matrix[8,2] = 8.29854e+12 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50393c1258.stan', line 48, column 0 to column 66) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 4 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 1.31434e+140, but Precision matrix[8,2] = 1.31434e+140 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50393c1258.stan', line 48, column 0 to column 66) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 2 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 3 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 4 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 2 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 4 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 3 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 2 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 4 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 3 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 4 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 2 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 3 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 4 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 2 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 2 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 2 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 3 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 4 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 4 finished in 4.0 seconds. #> Chain 2 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 2 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 3 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 2 finished in 4.6 seconds. #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 3 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 6.2 seconds. #> Chain 3 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 3 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 3 finished in 7.7 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 5.6 seconds. #> Total execution time: 7.8 seconds. #>  #> Warning: 4 of 4 chains had an E-BFMI less than 0.2. #> See https://mc-stan.org/misc/warnings for details.  # Extract the model summary summary(mod1) #> GAM formula: #> y ~ s(season, bs = \"cc\") #> <environment: 0x000001e2d9811780> #>  #> Family: #> poisson #>  #> Link function: #> log #>  #> Trend model: #> RW #>  #> N series: #> 3  #>  #> N timepoints: #> 60  #>  #> Status: #> Fitted using Stan  #>  #> GAM coefficient (beta) estimates: #>                    2.5%        50%       97.5% Rhat n.eff #> (Intercept)  0.28372785  0.4927870  0.69300185    1   371 #> s(season).1 -0.25128640  0.0523098  0.33692460    1  2078 #> s(season).2 -0.34197497 -0.0401931  0.27661705    1  2448 #> s(season).3 -0.66018485 -0.3539210 -0.03510196    1  2705 #> s(season).4 -1.04790600 -0.6687195 -0.32652333    1  2469 #> s(season).5 -0.89876700 -0.5283935 -0.19634105    1  3016 #> s(season).6 -0.81562630 -0.4507555 -0.13070048    1  2932 #> s(season).7 -0.58964575 -0.2200405  0.09842452    1  3321 #> s(season).8 -0.03064462  0.2434340  0.51568128    1  2294 #>  #> GAM smoothing parameter (rho) estimates: #>               2.5%     50%    97.5% Rhat n.eff #> s(season) 2.297529 3.54606 4.312803    1  1324 #>  #> Latent trend variance estimates: #>                2.5%       50%     97.5% Rhat n.eff #> sigma[1] 0.03803160 0.1005715 0.2257391 1.06    64 #> sigma[2] 0.05788034 0.1937425 0.4051644 1.07    47 #> sigma[3] 0.13446390 0.2560340 0.4534499 1.05    99 #>  #> Stan MCMC diagnostics #> n_eff / iter looks reasonable for all parameters #> Rhats above 1.05 found for 4 parameters #> *Diagnose further to investigate why the chains have not mixed #> 0 of 2000 iterations ended with a divergence (0%) #> 0 of 2000 iterations saturated the maximum tree depth of 12 (0%) #> Chain 1: E-FMI = 0.1095Chain 2: E-FMI = 0.1069Chain 3: E-FMI = 0.097Chain 4: E-FMI = 0.1642*E-FMI below 0.2 indicates you may need to reparameterize your model #>   # Plot the estimated historical trend and forecast for one series plot(mod1, type = 'trend', series = 1)  plot(mod1, type = 'forecast', series = 1)   # Compute the forecast using covariate information in data_test plot(object = mod1, type = 'trend', newdata = dat$data_test,      series = 1)  plot(object = mod1, type = 'forecast', newdata = dat$data_test,      series = 1) #> Out of sample DRPS: #> [1] 25.23879 #>    # Plot the estimated seasonal smooth function plot(mod1, type = 'smooths')   # Plot estimated first derivatives of the smooth plot(mod1, type = 'smooths', derivatives = TRUE)   # Plot partial residuals of the smooth plot(mod1, type = 'smooths', residuals = TRUE)   # Plot posterior realisations for the smooth plot(mod1, type = 'smooths', realisations = TRUE)   # Example of how to use dynamic coefficients # Simulate a time-varying coefficient for the effect of temperature set.seed(3) N = 200 beta_temp <- vector(length = N) beta_temp[1] <- 0.4 for(i in 2:N){   beta_temp[i] <- rnorm(1, mean = beta_temp[i - 1], sd = 0.025) }  # Simulate the temperature covariate temp <- rnorm(N, sd = 1) # Simulate the Gaussian observation process out <- rnorm(N, mean = 4 + beta_temp * temp,              sd = 0.5)  # Gather necessary data into a data.frame; split into training / testing data = data.frame(out, temp, time = seq_along(temp)) data_train <- data[1:180,] data_test <- data[181:200,]  # Fit the model using the dynamic() formula helper mod <- mvgam(formula = out ~ dynamic(temp, rho = 8),              family = gaussian(),             data = data_train,             newdata = data_test) #> Using cmdstanr as the backend #>  #> In file included from stan/lib/stan_math/lib/boost_1.78.0/boost/multi_array/multi_array_ref.hpp:32, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/multi_array.hpp:34, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/numeric/odeint/algebra/multi_array_algebra.hpp:22, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/numeric/odeint.hpp:63, #>                  from stan/lib/stan_math/stan/math/prim/functor/ode_rk45.hpp:9, #>                  from stan/lib/stan_math/stan/math/prim/functor/integrate_ode_rk45.hpp:6, #>                  from stan/lib/stan_math/stan/math/prim/functor.hpp:15, #>                  from stan/lib/stan_math/stan/math/rev/fun.hpp:198, #>                  from stan/lib/stan_math/stan/math/rev.hpp:10, #>                  from stan/lib/stan_math/stan/math.hpp:19, #>                  from stan/src/stan/model/model_header.hpp:4, #>                  from C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.hpp:2: #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:180:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   180 |         : public boost::functional::detail::unary_function<typename unary_traits<Predicate>::argument_type,bool> #>       |                                             ^~~~~~~~~~~~~~ #> In file included from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/string:48, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/locale_classes.h:40, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/ios_base.h:41, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/ios:42, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/istream:38, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/sstream:38, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/complex:45, #>                  from stan/lib/stan_math/lib/eigen_3.4.0/Eigen/Core:50, #>                  from stan/lib/stan_math/lib/eigen_3.4.0/Eigen/Dense:1, #>                  from stan/lib/stan_math/stan/math/prim/fun/Eigen.hpp:22, #>                  from stan/lib/stan_math/stan/math/rev.hpp:4: #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:214:45: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   214 |         : public boost::functional::detail::binary_function< #>       |                                             ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:252:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   252 |         : public boost::functional::detail::unary_function< #>       |                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_ma #> th/lib/boost_1.78.0/boost/functional.hpp:299:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   299 |         : public boost::functional::detail::unary_function< #>       |                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:345:57: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   345 |     class mem_fun_t : public boost::functional::detail::unary_function<T*, S> #>       |                                                         ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:361:58: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   361 |     class mem_fun1_t : public boost::functional::detail::binary_function<T*, A, S> #>       |                                                          ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:377:63: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   377 |     class const_mem_fun_t : public boost::functional::detail::unary_function<const T*, S> #>       |                                                               ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:393:64: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   393 |     class const_mem_fun1_t : public boost::functional::detail::binary_function<const T*, A, S> #>       |                                                                ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:438:61: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   438 |     class mem_fun_ref_t : public boost::functional::detail::unary_function<T&, S> #>       |                                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:454:62: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   454 |     class mem_fun1_ref_t : public boost::functional::detail::binary_function<T&, A, S> #>       |                                                              ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c #> ++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:470:67: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   470 |     class const_mem_fun_ref_t : public boost::functional::detail::unary_function<const T&, S> #>       |                                                                   ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:487:68: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   487 |     class const_mem_fun1_ref_t : public boost::functional::detail::binary_function<const T&, A, S> #>       |                                                                    ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:533:73: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   533 |     class pointer_to_unary_function : public boost::functional::detail::unary_function<Arg,Result> #>       |                                                                         ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:557:74: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   557 |     class pointer_to_binary_functi #> on : public boost::functional::detail::binary_function<Arg1,Arg2,Result> #>       |                                                                          ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #>  - chain 1: sigma_obs, lambda #>  - chain 2: sigma_obs, lambda #>  - chain 3: sigma_obs, lambda #>  - chain 4: sigma_obs, lambda #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: normal_id_glm_lpdf: Scale vector[1] is inf, but must be positive finite! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 72, column 0 to line 74, column 16) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 2 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 2 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 2 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: normal_id_glm_lpdf: Scale vector[1] is inf, but must be positive finite! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 72, column 0 to line 74, column 16) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: normal_id_glm_lpdf: Scale vector[1] is inf, but must be positive finite! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 72, column 0 to line 74, column 16) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 59, column 18 to column 50) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 3 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 3 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 3 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 3 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 59, column 18 to column 50) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 4 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 4 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 4 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 4 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: normal_id_glm_lpdf: Scale vector[1] is inf, but must be positive finite! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 72, column 0 to line 74, column 16) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: normal_id_glm_lpdf: Scale vector[1] is inf, but must be positive finite! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 72, column 0 to line 74, column 16) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f504a1f7193.stan', line 59, column 18 to column 50) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 2 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 2 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 2 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 3 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 3 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 3 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 4 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 4 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 2 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 3 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 4 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 2 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 3 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 4 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 2 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 3 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 4 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 0.7 seconds. #> Chain 2 finished in 0.6 seconds. #> Chain 3 finished in 0.6 seconds. #> Chain 4 finished in 0.7 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.6 seconds. #> Total execution time: 0.8 seconds. #>  #> Warning: 2 of 4 chains had an E-BFMI less than 0.2. #> See https://mc-stan.org/misc/warnings for details.  # Inspect the model summary, forecast and time-varying coefficient distribution summary(mod) #> GAM formula: #> out ~ dynamic(temp, rho = 8) #> <environment: 0x000001e2d9811780> #>  #> Family: #> gaussian #>  #> Link function: #> identity #>  #> Trend model: #> None #>  #> N series: #> 1  #>  #> N timepoints: #> 180  #>  #> Status: #> Fitted using Stan  #>  #> Observation error parameter estimates: #>                   2.5%      50%     97.5% Rhat n.eff #> sigma_obs[1] 0.4658227 0.517289 0.5785754    1  2144 #>  #> GAM coefficient (beta) estimates: #>                         2.5%           50%      97.5% Rhat n.eff #> (Intercept)      3.943714500  4.0120800000 4.07530350 1.00  2288 #> s(time):temp.1  -0.111552050 -0.0160818500 0.04704970 1.00   898 #> s(time):temp.2  -0.078046920 -0.0162655500 0.02761083 1.00   730 #> s(time):temp.3  -0.008135804  0.0444124500 0.11878077 1.02   243 #> s(time):temp.4  -0.060512980 -0.0036637650 0.04830456 1.00  2981 #> s(time):temp.5  -0.030748270  0.0148170500 0.07897441 1.00  1342 #> s(time):temp.6  -0.094586938 -0.0245227000 0.02087198 1.01   456 #> s(time):temp.7  -0.064651340 -0.0049653550 0.05454625 1.00  3082 #> s(time):temp.8  -0.053493452  0.0033012300 0.06209671 1.00  3030 #> s(time):temp.9  -0.082127185 -0.0104171000 0.03920751 1.00  1196 #> s(time):temp.10 -0.074227078 -0.0063272500 0.04907026 1.00  2087 #> s(time):temp.11 -0.065581037 -0.0038217450 0.05837250 1.00  2879 #> s(time):temp.12 -0.048184408  0.0116623500 0.09193376 1.01  1328 #> s(time):temp.13 -0.056134755  0.0039679100 0.07860247 1.00  1712 #> s(time):temp.14 -0.096727177 -0.0049157300 0.06318503 1.00  2627 #> s(time):temp.15 -0.060965772  0.0101946500 0.11036877 1.00  1391 #> s(time):temp.16 -0.063864628  0.0019344400 0.08013428 1.00  2798 #> s(time):temp.17 -0.063769393  0.0057590550 0.10066907 1.00  1521 #> s(time):temp.18 -0.088537710 -0.0019719100 0.07346853 1.00  2599 #> s(time):temp.19 -0.098314758 -0.0050555400 0.07081838 1.00  2567 #> s(time):temp.20 -0.069746648  0.0038169050 0.09595735 1.00  2490 #> s(time):temp.21 -0.077636225  0.0021423200 0.08316651 1.00  2712 #> s(time):temp.22 -0.103281075 -0.0040573400 0.07663658 1.00  1849 #> s(time):temp.23 -0.081677875 -0.0002926995 0.08511869 1.00  2593 #> s(time):temp.24 -0.079156288  0.0004921035 0.09594754 1.00  3106 #> s(time):temp.25  0.239141425  0.3617760000 0.47429915 1.00  1758 #>  #> GAM smoothing parameter (rho) estimates: #>                    2.5%      50%     97.5% Rhat n.eff #> s(time):temp  -4.923213 -3.35104 -2.576742 1.05    73 #> s(time):temp2 -1.342509  1.24654  3.751028 1.00  1451 #>  #> Stan MCMC diagnostics #> n_eff / iter looks reasonable for all parameters #> Rhat looks reasonable for all parameters #> 0 of 2000 iterations ended with a divergence (0%) #> 0 of 2000 iterations saturated the maximum tree depth of 12 (0%) #> Chain 1: E-FMI = 0.1604Chain 2: E-FMI = 0.178*E-FMI below 0.2 indicates you may need to reparameterize your model #>  plot(mod, type = 'smooths')  plot(mod, type = 'forecast', newdata = data_test) #> Out of sample CRPS: #> [1] 5.34492 #>    # Propagating the smooth term shows how the coefficient is expected to evolve plot_mvgam_smooth(mod, smooth = 1, newdata = data) abline(v = 180, lty = 'dashed', lwd = 2)   # Example showing how to incorporate an offset; simulate some count data # with different means per series set.seed(100) dat <- sim_mvgam(trend_rel = 0, mu_obs = c(4, 8, 8), seasonality = 'hierarchical') #> Error in sim_mvgam(trend_rel = 0, mu_obs = c(4, 8, 8), seasonality = \"hierarchical\"): unused argument (mu_obs = c(4, 8, 8))  # Add offset terms to the training and testing data dat$data_train$offset <- 0.5 * as.numeric(dat$data_train$series) dat$data_test$offset <- 0.5 * as.numeric(dat$data_test$series)  # Fit a model that includes the offset in the linear predictor as well as # hierarchical seasonal smooths mod1 <- mvgam(formula = y ~ offset(offset) +          s(season, bs = 'cc')  +          s(season, by = series, m = 1, k = 5),          data = dat$data_train,          trend_model = 'None',          use_stan = TRUE) #> Using cmdstanr as the backend #>  #> In file included from stan/lib/stan_math/lib/boost_1.78.0/boost/multi_array/multi_array_ref.hpp:32, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/multi_array.hpp:34, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/numeric/odeint/algebra/multi_array_algebra.hpp:22, #>                  from stan/lib/stan_math/lib/boost_1.78.0/boost/numeric/odeint.hpp:63, #>                  from stan/lib/stan_math/stan/math/prim/functor/ode_rk45.hpp:9, #>                  from stan/lib/stan_math/stan/math/prim/functor/integrate_ode_rk45.hpp:6, #>                  from stan/lib/stan_math/stan/math/prim/functor.hpp:15, #>                  from stan/lib/stan_math/stan/math/rev/fun.hpp:198, #>                  from stan/lib/stan_math/stan/math/rev.hpp:10, #>                  from stan/lib/stan_math/stan/math.hpp:19, #>                  from stan/src/stan/model/model_header.hpp:4, #>                  from C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50a48626a.hpp:2: #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:180:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   180 |         : public boost::functional::detail::unary_function<typename unary_traits<Predicate>::argument_type,bool> #>       |                                             ^~~~~~~~~~~~~~ #> In file included from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/string:48, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/locale_classes.h:40, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/ios_base.h:41, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/ios:42, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/istream:38, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/sstream:38, #>                  from C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/complex:45, #>                  from stan/lib/stan_math/lib/eigen_3.4.0/Eigen/Core:50, #>                  from stan/lib/stan_math/lib/eigen_3.4.0/Eigen/Dense:1, #>                  from stan/lib/stan_math/stan/math/prim/fun/Eigen.hpp:22, #>                  from stan/lib/stan_math/stan/math/rev.hpp:4: #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:214:45: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   214 |         : public boost::functional::detail::binary_function< #>       |                                             ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:252:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   252 |         : public boost::functional::detail::unary_function< #>       |                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_ma #> th/lib/boost_1.78.0/boost/functional.hpp:299:45: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   299 |         : public boost::functional::detail::unary_function< #>       |                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:345:57: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   345 |     class mem_fun_t : public boost::functional::detail::unary_function<T*, S> #>       |                                                         ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:361:58: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   361 |     class mem_fun1_t : public boost::functional::detail::binary_function<T*, A, S> #>       |                                                          ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:377:63: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   377 |     class const_mem_fun_t : public boost::functional::detail::unary_function<const T*, S> #>       |                                                               ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:393:64: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   393 |     class const_mem_fun1_t : public boost::functional::detail::binary_function<const T*, A, S> #>       |                                                                ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:438:61: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   438 |     class mem_fun_ref_t : public boost::functional::detail::unary_function<T&, S> #>       |                                                             ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:454:62: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   454 |     class mem_fun1_ref_t : public boost::functional::detail::binary_function<T&, A, S> #>       |                                                              ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c #> ++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:470:67: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   470 |     class const_mem_fun_ref_t : public boost::functional::detail::unary_function<const T&, S> #>       |                                                                   ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:487:68: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   487 |     class const_mem_fun1_ref_t : public boost::functional::detail::binary_function<const T&, A, S> #>       |                                                                    ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:533:73: warning: 'template<class _Arg, class _Result> struct std::unary_function' is deprecated [-Wdeprecated-declarations] #>   533 |     class pointer_to_unary_function : public boost::functional::detail::unary_function<Arg,Result> #>       |                                                                         ^~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:117:12: note: declared here #>   117 |     struct unary_function #>       |            ^~~~~~~~~~~~~~ #> stan/lib/stan_math/lib/boost_1.78.0/boost/functional.hpp:557:74: warning: 'template<class _Arg1, class _Arg2, class _Result> struct std::binary_function' is deprecated [-Wdeprecated-declarations] #>   557 |     class pointer_to_binary_functi #> on : public boost::functional::detail::binary_function<Arg1,Arg2,Result> #>       |                                                                          ^~~~~~~~~~~~~~~ #> C:/RBuildTools/4.2/ucrt64/include/c++/12.2.0/bits/stl_function.h:131:12: note: declared here #>   131 |     struct binary_function #>       |            ^~~~~~~~~~~~~~~ #> Init values were only set for a subset of parameters.  #> Missing init values for the following parameters: #>  - chain 1: lambda #>  - chain 2: lambda #>  - chain 3: lambda #>  - chain 4: lambda #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 1.72115e+151, but Precision matrix[8,2] = 1.72115e+151 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50a48626a.stan', line 46, column 0 to column 66) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 2.02742e+127, but Precision matrix[8,2] = 2.02742e+127 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50a48626a.stan', line 46, column 0 to column 66) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 3 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 4.72695e+173, but Precision matrix[8,2] = 4.72695e+173 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50a48626a.stan', line 46, column 0 to column 66) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 4 Iteration:   1 / 1000 [  0%]  (Warmup)  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: multi_normal_prec_lpdf: LDLT_Factor of precision parameter is not positive definite.  last conditional variance is 0. (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50a48626a.stan', line 46, column 0 to column 66) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 1 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 1 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 1 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 1 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: multi_normal_prec_lpdf: Precision matrix is not symmetric. Precision matrix[2,8] = 1.93551e+11, but Precision matrix[8,2] = 1.93551e+11 (in 'C:/Users/Nick/AppData/Local/Temp/RtmpUrpXFF/model-6f50a48626a.stan', line 46, column 0 to column 66) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 2 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 2 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 2 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 2 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 3 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 3 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 3 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 3 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 3 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 100 / 1000 [ 10%]  (Warmup)  #> Chain 4 Iteration: 200 / 1000 [ 20%]  (Warmup)  #> Chain 4 Iteration: 300 / 1000 [ 30%]  (Warmup)  #> Chain 4 Iteration: 400 / 1000 [ 40%]  (Warmup)  #> Chain 4 Iteration: 500 / 1000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 501 / 1000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 2 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 3 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 4 Iteration: 600 / 1000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 2 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 3 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 4 Iteration: 700 / 1000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 2 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 2 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 3 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 4 Iteration: 800 / 1000 [ 80%]  (Sampling)  #> Chain 2 finished in 0.7 seconds. #> Chain 1 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 3 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 4 Iteration: 900 / 1000 [ 90%]  (Sampling)  #> Chain 4 Iteration: 1000 / 1000 [100%]  (Sampling)  #> Chain 1 finished in 0.8 seconds. #> Chain 3 finished in 0.7 seconds. #> Chain 4 finished in 0.8 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.8 seconds. #> Total execution time: 0.9 seconds. #>   # Inspect the model file to see the modification to the linear predictor # (eta) mod1$model_file #>  [1] \"\"                                                                                                                      #>  [2] \"// Stan model code generated by package mvgam\"                                                                         #>  [3] \"data {\"                                                                                                                #>  [4] \"int<lower=0> total_obs; // total number of observations\"                                                               #>  [5] \"int<lower=0> n; // number of timepoints per series\"                                                                    #>  [6] \"int<lower=0> n_sp; // number of smoothing parameters\"                                                                  #>  [7] \"int<lower=0> n_series; // number of series\"                                                                            #>  [8] \"int<lower=0> num_basis; // total number of basis coefficients\"                                                         #>  [9] \"vector[num_basis] zero; // prior locations for basis coefficients\"                                                     #> [10] \"vector[total_obs] offset; // offset vector\"                                                                            #> [11] \"real p_taus[1]; // prior precisions for parametric coefficients\"                                                       #> [12] \"real p_coefs[1]; // prior locations for parametric coefficients\"                                                       #> [13] \"matrix[total_obs, num_basis] X; // mgcv GAM design matrix\"                                                             #> [14] \"int<lower=0> ytimes[n, n_series]; // time-ordered matrix (which col in X belongs to each [time, series] observation?)\" #> [15] \"matrix[8,8] S1; // mgcv smooth penalty matrix S1\"                                                                      #> [16] \"matrix[4,4] S2; // mgcv smooth penalty matrix S2\"                                                                      #> [17] \"matrix[4,4] S3; // mgcv smooth penalty matrix S3\"                                                                      #> [18] \"matrix[4,4] S4; // mgcv smooth penalty matrix S4\"                                                                      #> [19] \"int<lower=0> n_nonmissing; // number of nonmissing observations\"                                                       #> [20] \"int<lower=0> flat_ys[n_nonmissing]; // flattened nonmissing observations\"                                              #> [21] \"matrix[n_nonmissing, num_basis] flat_xs; // X values for nonmissing observations\"                                      #> [22] \"int<lower=0> obs_ind[n_nonmissing]; // indices of nonmissing observations\"                                             #> [23] \"}\"                                                                                                                     #> [24] \"parameters {\"                                                                                                          #> [25] \"// raw basis coefficients\"                                                                                             #> [26] \"vector[num_basis] b_raw;\"                                                                                              #> [27] \"\"                                                                                                                      #> [28] \"// smoothing parameters\"                                                                                               #> [29] \"vector<lower=0>[n_sp] lambda;\"                                                                                         #> [30] \"}\"                                                                                                                     #> [31] \"\"                                                                                                                      #> [32] \"transformed parameters {\"                                                                                              #> [33] \"// basis coefficients\"                                                                                                 #> [34] \"vector[num_basis] b;\"                                                                                                  #> [35] \"\"                                                                                                                      #> [36] \"b[1:num_basis] = b_raw[1:num_basis];\"                                                                                  #> [37] \"}\"                                                                                                                     #> [38] \"\"                                                                                                                      #> [39] \"model {\"                                                                                                               #> [40] \"// parametric effect priors (regularised for identifiability)\"                                                         #> [41] \"for (i in 1:1) {\"                                                                                                      #> [42] \"b_raw[i] ~ normal(p_coefs[i], sqrt(1 / p_taus[i]));\"                                                                   #> [43] \"}\"                                                                                                                     #> [44] \"\"                                                                                                                      #> [45] \"// prior for s(season)...\"                                                                                             #> [46] \"b_raw[2:9] ~ multi_normal_prec(zero[2:9],S1[1:8,1:8] * lambda[1]);\"                                                    #> [47] \"\"                                                                                                                      #> [48] \"// prior for s(season):seriesseries_1...\"                                                                              #> [49] \"b_raw[10:13] ~ multi_normal_prec(zero[10:13],S2[1:4,1:4] * lambda[2]);\"                                                #> [50] \"\"                                                                                                                      #> [51] \"// prior for s(season):seriesseries_2...\"                                                                              #> [52] \"b_raw[14:17] ~ multi_normal_prec(zero[14:17],S3[1:4,1:4] * lambda[3]);\"                                                #> [53] \"\"                                                                                                                      #> [54] \"// prior for s(season):seriesseries_3...\"                                                                              #> [55] \"b_raw[18:21] ~ multi_normal_prec(zero[18:21],S4[1:4,1:4] * lambda[4]);\"                                                #> [56] \"\"                                                                                                                      #> [57] \"// priors for smoothing parameters\"                                                                                    #> [58] \"lambda ~ normal(10, 25);\"                                                                                              #> [59] \"\"                                                                                                                      #> [60] \"{\"                                                                                                                     #> [61] \"// likelihood functions\"                                                                                               #> [62] \"flat_ys ~ poisson_log_glm(flat_xs,\"                                                                                    #> [63] \"offset[obs_ind],b);\"                                                                                                   #> [64] \"}\"                                                                                                                     #> [65] \"}\"                                                                                                                     #> [66] \"\"                                                                                                                      #> [67] \"\"                                                                                                                      #> [68] \"generated quantities {\"                                                                                                #> [69] \"vector[total_obs] eta;\"                                                                                                #> [70] \"matrix[n, n_series] mus;\"                                                                                              #> [71] \"vector[n_sp] rho;\"                                                                                                     #> [72] \"array[n, n_series] int ypred;\"                                                                                         #> [73] \"rho = log(lambda);\"                                                                                                    #> [74] \"\"                                                                                                                      #> [75] \"// posterior predictions\"                                                                                              #> [76] \"eta = X * b + offset;\"                                                                                                 #> [77] \"for(s in 1:n_series){ \"                                                                                                #> [78] \"mus[1:n, s] = eta[ytimes[1:n, s]];\"                                                                                    #> [79] \"ypred[1:n, s] = poisson_log_rng(mus[1:n, s]);\"                                                                         #> [80] \"}\"                                                                                                                     #> [81] \"}\"                                                                                                                     #> [82] \"\"                                                                                                                       # Forecasts for the first two series will differ in magnitude layout(matrix(1:2, ncol = 2)) plot(mod1, type = 'forecast', series = 1, newdata = dat$data_test,      ylim = c(0, 70)) #> Out of sample DRPS: #> [1] 48.96913 #>  plot(mod1, type = 'forecast', series = 2, newdata = dat$data_test,      ylim = c(0, 70)) #> Out of sample DRPS: #> [1] 31.29473 #>   layout(1)  # Changing the offset for the testing data should lead to changes in # the forecast dat$data_test$offset <- dat$data_test$offset - 2 plot(mod1, 'forecast', newdata = dat$data_test) #> Out of sample DRPS: #> [1] 72.20892 #>    # Relative Risks can be computed by fixing the offset to the same value # for each series dat$data_test$offset <- rep(1, NROW(dat$data_test)) preds_rr <- predict(mod1, type = 'link', newdata = dat$data_test) series1_inds <- which(dat$data_test$series == 'series_1') series2_inds <- which(dat$data_test$series == 'series_2')  # Relative Risks are now more comparable among series layout(matrix(1:2, ncol = 2)) plot(preds_rr[1, series1_inds], type = 'l', col = 'grey75',      ylim = range(preds_rr),      ylab = 'Series1 Relative Risk', xlab = 'Time') for(i in 2:50){  lines(preds_rr[i, series1_inds], col = 'grey75') }  plot(preds_rr[1, series2_inds], type = 'l', col = 'darkred',      ylim = range(preds_rr),      ylab = 'Series2 Relative Risk', xlab = 'Time') for(i in 2:50){  lines(preds_rr[i, series2_inds], col = 'darkred')  }  layout(1) # }"},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam_families.html","id":null,"dir":"Reference","previous_headings":"","what":"Supported mvgam families — mvgam_families","title":"Supported mvgam families — mvgam_families","text":"Supported mvgam families","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam_families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supported mvgam families — mvgam_families","text":"","code":"lognormal(link = \"identity\")  tweedie(link = \"log\")  student_t(link = \"identity\")"},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam_families.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supported mvgam families — mvgam_families","text":"link specification family link function. present changed","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam_families.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Supported mvgam families — mvgam_families","text":"mvgam currently supports following standard observation families: gaussian real-valued data poisson count data addition, following extended families mgcv package supported: betar proportional data (0,1) nb count data Finally, mvgam supports three extended families described : lognormal non-negative real-valued data tweedie count data (power parameter p fixed 1.5) student-t real-valued data Note poisson(), nb(), tweedie() available using JAGS. families, apart tweedie(), supported using Stan.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Supported mvgam trend models — mvgam_trends","title":"Supported mvgam trend models — mvgam_trends","text":"Supported mvgam trend models","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/mvgam_trends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Supported mvgam trend models — mvgam_trends","text":"mvgam currently supports following dynamic trend models: RW Random Walk AR1 Autoregressive model AR coefficient lag 1 AR2 Autoregressive model AR coefficients lags 1 2 AR3 Autoregressive model AR coefficients lags 1, 2 3 VAR1 Vector Autoregressive model VAR coefficients lag 1; contemporaneously uncorrelated errors GP Squared exponential Gaussian Process None latent trend fitted Dynamic factor models can used latent factors evolve either RW, AR1, AR2, AR3 GP. Note RW, AR1, AR2 AR3 available using JAGS. trend models supported using Stan.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast from a particle filtered mvgam object — pfilter_mvgam_fc","title":"Forecast from a particle filtered mvgam object — pfilter_mvgam_fc","text":"function generates forecast set particles capture unique proposal current state system modelled mvgam object. covariate timepoint information data_test used generate GAM component forecast, trends run forward time according state space dynamics. forecast weighted ensemble, weights determined particle's proposal likelihood prior recent assimilation step","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast from a particle filtered mvgam object — pfilter_mvgam_fc","text":"","code":"pfilter_mvgam_fc(   file_path = \"pfilter\",   n_cores = 2,   newdata,   data_test,   plot_legend = TRUE,   legend_position = \"topleft\",   ylim,   return_forecasts = FALSE )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast from a particle filtered mvgam object — pfilter_mvgam_fc","text":"file_path character string specifying file path particles saved n_cores integer specifying number cores generating particle forecasts parallel newdata dataframe list test data containing least 'series' time', addition variables included linear predictor formula data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows plot_legend logical stating whether include legend highlight observations used calibration assimilated particle filter legend_position legend location may specified setting x single keyword list \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"topright\", \"right\" \"center\". places legend inside plot frame given location. ylim Optional vector y-axis limits (min, max). limits used plots return_forecasts logical. TRUE, returned list object contain plots forecasts well forecast objects (matrix dimension n_particles x horizon)","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast from a particle filtered mvgam object — pfilter_mvgam_fc","text":"named list containing functions call base R plots series' forecast. Optionally actual forecasts returned within list separate list matrices","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate particles for online filtering from a fitted mvgam object — pfilter_mvgam_init","title":"Initiate particles for online filtering from a fitted mvgam object — pfilter_mvgam_init","text":"function generates set particles captures unique proposal current state system. next observation data_assim assimilated particles weighted proposal's multivariate composite likelihood update model's forecast distribution","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate particles for online filtering from a fitted mvgam object — pfilter_mvgam_init","text":"","code":"pfilter_mvgam_init(   object,   newdata,   data_assim,   n_particles = 1000,   file_path = \"pfilter\",   n_cores = 2 )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate particles for online filtering from a fitted mvgam object — pfilter_mvgam_init","text":"object list object returned mvgam newdata dataframe list test data containing least one observation per series (beyond last observation seen model object) assimilated particle filter. least contain 'series' 'time' one-step ahead horizon, addition variables included linear predictor object data_assim Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows n_particles integer specifying number unique particles generate tracking latent system state file_path character string specifying file path saving initiated particles n_cores integer specifying number cores generating particle forecasts parallel","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate particles for online filtering from a fitted mvgam object — pfilter_mvgam_init","text":"list object length = n_particles containing information parameters current state estimates particle generated saved, along important information original model, .rda object file_path","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_online.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic online particle filtering for assimilating new observations into a fitted mvgam model — pfilter_mvgam_online","title":"Automatic online particle filtering for assimilating new observations into a fitted mvgam model — pfilter_mvgam_online","text":"function operates sequentially new observations data_assim update posterior forecast distribution. wrapper calls pfilter_mvgam_smooth. iteration, next observation assimilated particles weighted proposal's multivariate composite likelihood","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_online.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic online particle filtering for assimilating new observations into a fitted mvgam model — pfilter_mvgam_online","text":"","code":"pfilter_mvgam_online(   newdata,   data_assim,   file_path = \"pfilter\",   threshold = 0.5,   use_resampling = FALSE,   kernel_lambda = 0.25,   n_cores = parallel::detectCores() - 1 )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_online.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic online particle filtering for assimilating new observations into a fitted mvgam model — pfilter_mvgam_online","text":"newdata dataframe list test data containing least one observation per series (beyond last observation seen model initialising particles pfilter_mvgam_init previous calls pfilter_mvgam_online. least contain 'series' 'time' one-step ahead horizon, addition variables included linear predictor object data_assim Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows file_path character string specifying file path locating particles threshold proportional numeric specifying Effective Sample Size limit resampling particles triggered (calculated ESS / n_particles) use_resampling == TRUE. 0 1 use_resampling logical specifying whether resampling used ESS falls specified threshold. Default option FALSE, relying instead kernel smoothing maintain particle diversity kernel_lambda proportional numeric specifying strength kernel smoothing use pulling low weight particles toward high likelihood state space. 0 1 n_cores integer specifying number cores generating particle forecasts parallel","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_online.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic online particle filtering for assimilating new observations into a fitted mvgam model — pfilter_mvgam_online","text":"list object length = n_particles containing information parameters current state estimates particle generated saved, along important information original model, .rda object file_path","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Assimilate new observations into a fitted mvgam model using resampling and kernel smoothing — pfilter_mvgam_smooth","title":"Assimilate new observations into a fitted mvgam model using resampling and kernel smoothing — pfilter_mvgam_smooth","text":"function operates new observation next_assim update posterior forecast distribution. next observation assimilated particle weights updated light recent multivariate composite likelihood. Low weight particles smoothed towards high weight state space using importance sampling, options given using resampling high weight particles Effective Sample Size falls user-specified threshold","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assimilate new observations into a fitted mvgam model using resampling and kernel smoothing — pfilter_mvgam_smooth","text":"","code":"pfilter_mvgam_smooth(   particles,   mgcv_model,   next_assim,   threshold = 0.25,   n_cores = parallel::detectCores() - 1,   use_resampling = FALSE,   kernel_lambda = 0.5 )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assimilate new observations into a fitted mvgam model using resampling and kernel smoothing — pfilter_mvgam_smooth","text":"particles list particles run one observation prior observation next_assim mgcv_model gam model returned call link{mvgam} next_assim dataframe test data containing one observation per series (beyond last observation seen model initialising particles pfilter_mvgam_init previous calls pfilter_mvgam_online. least contain 'series' 'time' one-step ahead horizon, addition variables included linear predictor object threshold proportional numeric specifying Effective Sample Size limit resampling particles triggered (calculated ESS / n_particles) use_resampling == TRUE. 0 1 n_cores integer specifying number cores generating particle forecasts parallel use_resampling logical specifying whether resampling used ESS falls specified threshold. Note resampling can result loss original model's diversity GAM beta coefficients, may undesirable consequences forecast distribution. use_resampling TRUE, effort made remedy assigning randomly sampled draws GAM beta coefficients original model's distribution particle. however guarantee loss diversity, especially successive resampling take place. Default option therefore FALSE kernel_lambda proportional numeric specifying strength smoothing use pulling low weight particles toward high likelihood state space. 0 1 file_path character string specifying file path locating particles","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pfilter_mvgam_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assimilate new observations into a fitted mvgam model using resampling and kernel smoothing — pfilter_mvgam_smooth","text":"list object length = n_particles containing information parameters current state estimates particle","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://nicholasjclark.github.io/mvgam/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Default mvgam plots — plot.mvgam","title":"Default mvgam plots — plot.mvgam","text":"function takes fitted mvgam object produces plots smooth functions, forecasts, trends uncertainty components","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default mvgam plots — plot.mvgam","text":"","code":"# S3 method for mvgam plot(   object,   type = \"residuals\",   series = 1,   residuals = FALSE,   newdata,   data_test,   ... )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default mvgam plots — plot.mvgam","text":"object list object returned mvgam type character specifying type plot return. Options : 'series, residuals, smooths, re (random effect smooths), pterms (parametric effects), forecast, trend, uncertainty, factors series integer specifying series set plotted. ignored type == 're' newdata Optional dataframe list test data containing least 'series' 'time' addition variables included linear predictor original formula. argument optional plotting sample forecast period observations (type = forecast) required plotting uncertainty components (type = uncertainty). data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows ... Additional arguments individual plotting function.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default mvgam plots — plot.mvgam","text":"base R plot set plots","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default mvgam plots — plot.mvgam","text":"plots useful getting overview fitted model estimated random effects smooth functions, individual plotting functions generally offer customisation.","code":""},{"path":[]},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default mvgam plots — plot.mvgam","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam_lfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Pareto-k and ELPD values from a leave-future-out object — plot.mvgam_lfo","title":"Plot Pareto-k and ELPD values from a leave-future-out object — plot.mvgam_lfo","text":"function takes object class mvgam_lfo create several informative diagnostic plots","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam_lfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Pareto-k and ELPD values from a leave-future-out object — plot.mvgam_lfo","text":"","code":"# S3 method for mvgam_lfo plot(object)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam_lfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Pareto-k and ELPD values from a leave-future-out object — plot.mvgam_lfo","text":"object object class mvgam_lfo","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot.mvgam_lfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Pareto-k and ELPD values from a leave-future-out object — plot.mvgam_lfo","text":"base R plot Pareto-k ELPD values evaluation timepoints. Pareto-k plot, dashed red line indicates specified threshold chosen triggering model refits. ELPD plot, dashed red line indicated bottom 10% quantile ELPD values. Points threshold may represent outliers difficult forecast","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","title":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","text":"function takes fitted mvgam object returns plots summary statistics latent dynamic factors","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","text":"","code":"plot_mvgam_factors(object, plot = TRUE)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","text":"object list object returned mvgam plot logical specifying whether factors plotted","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","text":"dataframe factor contributions , optionally, series base R plots","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","text":"model object estimated using dynamic factors, possible factors contributed estimated trends. due regularisation penalty acts independently factor's Gaussian precision, squeeze un-needed factors white noise process (effectively dropping factor model). function, factor tested null hypothesis white noise calculating sum factor's 2nd derivatives. factor larger contribution larger sum due weaker penalty factor's precision. plot == TRUE, factors also plotted.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_factors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Latent factor summaries for a fitted mvgam object — plot_mvgam_factors","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_forecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam posterior predictions for a specified series — plot_mvgam_forecasts","title":"Plot mvgam posterior predictions for a specified series — plot_mvgam_forecasts","text":"Plot mvgam posterior predictions specified series","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_forecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam posterior predictions for a specified series — plot_mvgam_forecasts","text":"","code":"plot_mvgam_fc(   object,   series = 1,   newdata,   data_test,   realisations = FALSE,   n_realisations = 15,   hide_xlabels = FALSE,   xlab,   ylab,   ylim,   n_cores = 1,   return_forecasts = FALSE,   return_score = FALSE,   ... )  # S3 method for mvgam_forecast plot(   object,   series = 1,   realisations = FALSE,   n_realisations = 15,   hide_xlabels = FALSE,   xlab,   ylab,   ylim,   return_score = FALSE,   ... )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_forecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam posterior predictions for a specified series — plot_mvgam_forecasts","text":"object list object returned mvgam series integer specifying series set plotted newdata Optional dataframe list test data containing least 'series' 'time' addition variables included linear predictor original formula. included, covariate information newdata used generate forecasts fitted model equations. newdata originally included call mvgam, forecasts already produced generative model simply extracted plotted. However newdata supplied original model call, assumption made newdata supplied comes sequentially data supplied data original model (.e. assume time gap last observation series 1 data first observation series 1 newdata). newdata contains observations column y, observations used compute Discrete Rank Probability Score forecast distribution data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows realisations logical. TRUE, forecast realisations shown spaghetti plot, making easier visualise diversity possible forecasts. FALSE, default, empirical quantiles forecast distribution shown n_realisations integer specifying number posterior realisations plot, realisations = TRUE. Ignored otherwise hide_xlabels logical. TRUE, xlabels printed allow user add custom labels using axis base R xlab label x axis. ylab label y axis. ylim Optional vector y-axis limits (min, max) n_cores integer specifying number cores generating forecasts parallel return_forecasts logical. TRUE, function plot forecast well returning forecast object (matrix dimension n_samples x horizon) return_score logical. TRUE sample test data provided newdata, probabilistic score calculated returned. score used depend observation family fitted model. Discrete families (poisson, negative binomial, tweedie) use Discrete Rank Probability Score. families use Continuous Rank Probability Score. value returned sum scores within sample forecast horizon ... par graphical parameters.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_forecasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mvgam posterior predictions for a specified series — plot_mvgam_forecasts","text":"base R graphics plot optional list containing forecast distribution sample probabilistic forecast score","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_forecasts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot mvgam posterior predictions for a specified series — plot_mvgam_forecasts","text":"plot_mvgam_fc draws posterior predictions object class mvgam calculates posterior empirical quantiles. plot.mvgam_forecast takes object class mvgam_forecast, forecasts already computed, plots resulting forecast distribution. realisations = FALSE, posterior quantiles plotted along true observed data used train model. Otherwise, spaghetti plot returned show possible forecast paths.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_pterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam parametric term partial effects — plot_mvgam_pterms","title":"Plot mvgam parametric term partial effects — plot_mvgam_pterms","text":"function plots posterior empirical quantiles partial effects parametric terms","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_pterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam parametric term partial effects — plot_mvgam_pterms","text":"","code":"plot_mvgam_pterms(object)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_pterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam parametric term partial effects — plot_mvgam_pterms","text":"object list object returned mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_pterms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mvgam parametric term partial effects — plot_mvgam_pterms","text":"base R graphics plot","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_pterms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot mvgam parametric term partial effects — plot_mvgam_pterms","text":"Posterior empirical quantiles parametric term's partial effect estimates (link scale) calculated visualised ribbon plots. effects can interpreted partial effect parametric term contributes terms model set 0","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_randomeffects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam random effect terms — plot_mvgam_randomeffects","title":"Plot mvgam random effect terms — plot_mvgam_randomeffects","text":"function plots posterior empirical quantiles random effect smooths (bs = re)","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_randomeffects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam random effect terms — plot_mvgam_randomeffects","text":"","code":"plot_mvgam_randomeffects(object)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_randomeffects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam random effect terms — plot_mvgam_randomeffects","text":"object list object returned mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_randomeffects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mvgam random effect terms — plot_mvgam_randomeffects","text":"base R graphics plot","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_randomeffects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot mvgam random effect terms — plot_mvgam_randomeffects","text":"Posterior empirical quantiles random effect coefficient estimates (link scale) calculated visualised ribbon plots. Labels coefficients taken levels original factor variable used specify smooth model's formula","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_resids.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","title":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","text":"function takes fitted mvgam object returns various residual diagnostic plots","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_resids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","text":"","code":"plot_mvgam_resids(object, series = 1, n_bins = 15, newdata, data_test)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_resids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","text":"object list object returned mvgam series integer specifying series set plotted n_bins integer specifying number bins use binning fitted values newdata Optional dataframe list test data containing least 'series', 'y', 'time' addition variables included linear predictor formula. included, covariate information newdata used generate forecasts fitted model equations. newdata originally included call mvgam, forecasts already produced generative model simply extracted used calculate residuals. However newdata supplied original model call, assumption made newdata supplied comes sequentially data supplied data original model (.e. assume time gap last observation series 1 data_train first observation series 1 newdata). data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_resids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","text":"series base R plots","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_resids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","text":"total four base R plots generated examine Dunn-Smyth residuals specified series. Plots include residuals vs fitted values plot, Q-Q plot, two plots check remaining temporal autocorrelation residuals. Note, plots use posterior medians fitted values / residuals, uncertainty represented.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_resids.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Residual diagnostics for a fitted mvgam object — plot_mvgam_resids","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot observed time series used for mvgam modelling — plot_mvgam_series","title":"Plot observed time series used for mvgam modelling — plot_mvgam_series","text":"function takes either fitted mvgam object data_train object produces plots observed time series, ACF, CDF histograms exploratory data analysis","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot observed time series used for mvgam modelling — plot_mvgam_series","text":"","code":"plot_mvgam_series(   object,   data,   data_train,   newdata,   data_test,   y = \"y\",   lines = TRUE,   series = 1,   n_bins,   log_scale = FALSE )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot observed time series used for mvgam modelling — plot_mvgam_series","text":"object Optional list object returned mvgam. Either object data_train must supplied. data Optional dataframe list training data containing least 'series' 'time'. Use argument training data gathered correct format mvgam modelling model yet fitted. data_train Deprecated. Still works place data users recommended use data instead seamless integration R workflows newdata Optional dataframe list test data containing least 'series' 'time' forecast horizon, addition variables included linear predictor formula. included, observed values test data compared model's forecast distribution exploring biases model predictions. data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows y Character. name outcome variable supplied data? Defaults 'y' lines Logical. TRUE, line plots used visualising time series. FALSE, points used. series Either integer specifying series set plotted string '', plots series available supplied data n_bins integer specifying number bins use binning observed values plotting histogram. Default use number bins returned call hist base R log_scale logical. series == '', flag used control whether time series plot shown log scale (using log(Y + 1)). can useful visualising many series may different observed ranges. Default FALSE","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot observed time series used for mvgam modelling — plot_mvgam_series","text":"set base R graphics plots. series integer, plots show observed time series, autocorrelation cumulative distribution functions, histogram series. series == '', set observed time series plots returned series shown plot single focal series highlighted, remaining series shown faint gray lines.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_series.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot observed time series used for mvgam modelling — plot_mvgam_series","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam smooth terms — plot_mvgam_smooth","title":"Plot mvgam smooth terms — plot_mvgam_smooth","text":"function plots posterior empirical quantiles series-specific smooth term","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam smooth terms — plot_mvgam_smooth","text":"","code":"plot_mvgam_smooth(   object,   series = 1,   smooth,   residuals = FALSE,   n_resid_bins = 25,   realisations = FALSE,   n_realisations = 15,   derivatives = FALSE,   newdata )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam smooth terms — plot_mvgam_smooth","text":"object list object returned mvgam series integer specifying series set plotted smooth either character integer specifying smooth term plotted residuals logical. TRUE posterior quantiles partial residuals added plots 1-D smooths series ribbon rectangles. Partial residuals smooth term median Dunn-Smyth residuals obtained dropping term concerned model, leaving estimates fixed (.e. estimates term plus original median Dunn-Smyth residuals). Note mvgam works Dunn-Smyth residuals working residuals, used mgcv, magnitudes partial residuals different expect plot.gam. Interpretation similar though, partial residuals evenly scattered around smooth function function well estimated n_resid_bins integer specifying number bins group covariate plotting partial residuals. Setting argument high can make messy plots difficult interpret, setting low likely mask potentially useful patterns partial residuals. Default 25 realisations logical. TRUE, posterior realisations shown spaghetti plot, making easier visualise diversity possible functions. FALSE, default, empirical quantiles posterior distribution shown n_realisations integer specifying number posterior realisations plot, realisations = TRUE. Ignored otherwise derivatives logical. TRUE, additional plot returned show estimated 1st derivative specified smooth (Note, works univariate smooths) newdata Optional dataframe predicting smooth, containing least 'series' addition variables included linear predictor original model's formula. Note currently supported plotting univariate smooths","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mvgam smooth terms — plot_mvgam_smooth","text":"base R graphics plot","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot mvgam smooth terms — plot_mvgam_smooth","text":"Smooth functions shown empirical quantiles (spaghetti plots) posterior partial expectations across sequence 500 values variable's min max, zeroing effects variables. present, univariate bivariate smooth plots allowed, though note bivariate smooths rely default behaviour plot.gam. nuanced visualisation, supply newdata just predicting gam model","code":""},{"path":[]},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam latent trend for a specified series — plot_mvgam_trend","title":"Plot mvgam latent trend for a specified series — plot_mvgam_trend","text":"Plot mvgam latent trend specified series","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam latent trend for a specified series — plot_mvgam_trend","text":"","code":"plot_mvgam_trend(   object,   series = 1,   newdata,   data_test,   realisations = FALSE,   n_realisations = 15,   n_cores = 1,   derivatives = FALSE,   hide_xlabels = FALSE,   xlab,   ylab,   ... )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam latent trend for a specified series — plot_mvgam_trend","text":"object list object returned mvgam series integer specifying series set plotted newdata Optional dataframe list test data containing least 'series' 'time' addition variables included linear predictor original formula. data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows realisations logical. TRUE, posterior trend realisations shown spaghetti plot, making easier visualise diversity possible trend paths. FALSE, default, empirical quantiles posterior distribution shown n_realisations integer specifying number posterior realisations plot, realisations = TRUE. Ignored otherwise n_cores integer specifying number cores generating trend forecasts parallel derivatives logical. TRUE, additional plot returned show estimated 1st derivative estimated trend hide_xlabels logical. TRUE, xlabels printed allow user add custom labels using axis base R. Ignored derivatives = TRUE xlab label x axis. ylab label y axis. ... par graphical parameters.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam forecast uncertainty contributions for a specified series — plot_mvgam_uncertainty","title":"Plot mvgam forecast uncertainty contributions for a specified series — plot_mvgam_uncertainty","text":"Plot mvgam forecast uncertainty contributions specified series","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam forecast uncertainty contributions for a specified series — plot_mvgam_uncertainty","text":"","code":"plot_mvgam_uncertainty(   object,   series = 1,   newdata,   data_test,   legend_position = \"topleft\",   hide_xlabels = FALSE )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/plot_mvgam_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam forecast uncertainty contributions for a specified series — plot_mvgam_uncertainty","text":"object list object returned mvgam series integer specifying series set plotted newdata dataframe list containing least 'series' 'time' forecast horizon, addition variables included linear predictor formula data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows legend_position location may also specified setting x single keyword list: \"none\", \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"topright\", \"right\" \"center\". places legend inside plot frame given location (\"none\"). hide_xlabels logical. TRUE, xlabels printed allow user add custom labels using axis base R","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/ppc.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mvgam posterior predictive checks for a specified series — ppc.mvgam","title":"Plot mvgam posterior predictive checks for a specified series — ppc.mvgam","text":"Plot mvgam posterior predictive checks specified series","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/ppc.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mvgam posterior predictive checks for a specified series — ppc.mvgam","text":"","code":"# S3 method for mvgam ppc(   object,   newdata,   data_test,   series = 1,   type = \"hist\",   n_bins,   legend_position,   xlab,   ylab,   ... )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/ppc.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mvgam posterior predictive checks for a specified series — ppc.mvgam","text":"object list object returned mvgam newdata Optional dataframe list test data containing least 'series' 'time' forecast horizon, addition variables included linear predictor formula. included, observed values test data compared model's forecast distribution exploring biases model predictions. Note useful newdata also included fitting original model. data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows series integer specifying series set plotted type character specifying type posterior predictive check calculate plot. Valid options : 'rootogram', 'mean', 'hist', 'density', 'prop_zero', 'pit' 'cdf' n_bins integer specifying number bins use binning observed values plotting rootogram histogram. Default 50 bins rootogram, means >50 unique observed values, bins used prevent overplotting facilitate interpretation. Default histogram use number bins returned call hist base R legend_position location may also specified setting x single keyword list \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"topright\", \"right\" \"center\". places legend inside plot frame given location. alternatively, use \"none\" hide legend. xlab label x axis. ylab label y axis. ... par graphical parameters.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/ppc.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mvgam posterior predictive checks for a specified series — ppc.mvgam","text":"base R graphics plot showing either posterior rootogram (type == 'rootogram'), predicted vs observed mean series (type == 'mean'), predicted vs observed proportion zeroes series (type == 'prop_zero'),predicted vs observed histogram series (type == 'hist'), kernel density empirical CDF estimates posterior predictions (type == 'density' type == 'cdf') Probability Integral Transform histogram (type == 'pit').","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/ppc.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot mvgam posterior predictive checks for a specified series — ppc.mvgam","text":"Posterior predictions drawn fitted mvgam compared empirical distribution observed data specified series help evaluate model's ability generate unbiased predictions. plots apart 'rootogram', posterior predictions can also compared sample observations long observations included 'data_test' original model fit supplied . Rootograms currently plotted using 'hanging' style","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/predict.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from the GAM component of an mvgam model — predict.mvgam","title":"Predict from the GAM component of an mvgam model — predict.mvgam","text":"Predict GAM component mvgam model","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/predict.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from the GAM component of an mvgam model — predict.mvgam","text":"","code":"# S3 method for mvgam predict(object, newdata, data_test, type = \"link\", n_cores = 1)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/predict.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from the GAM component of an mvgam model — predict.mvgam","text":"object list object returned mvgam newdata Optional dataframe list test data containing variables included linear predictor formula. supplied, predictions generated original observations used model fit. data_test Deprecated. Still works place newdata users recommended use newdata instead seamless integration R workflows type value link (default) linear predictor calculated log link scale. response used, predictions take uncertainty observation process account return predictions outcome (discrete) scale. n_cores integer specifying number cores generating predictions parallel","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/predict.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from the GAM component of an mvgam model — predict.mvgam","text":"matrix dimension n_samples x new_obs, n_samples number posterior samples fitted object n_obs number test observations newdata","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/predict.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict from the GAM component of an mvgam model — predict.mvgam","text":"Note sets predictions, temporal dynamics fitted latent trends ignored. function therefore suited posterior simulation GAM component mvgam model, forecasting functions plot_mvgam_fc forecast.mvgam better suited generate h-step ahead forecasts respect temporal dynamics estimated latent trends.","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/print.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a fitted mvgam object — print.mvgam","title":"Summary for a fitted mvgam object — print.mvgam","text":"function takes fitted mvgam object prints quick summary","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/print.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a fitted mvgam object — print.mvgam","text":"","code":"# S3 method for mvgam print(object)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/print.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a fitted mvgam object — print.mvgam","text":"object list object returned mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/print.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a fitted mvgam object — print.mvgam","text":"list printed -screen","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/print.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary for a fitted mvgam object — print.mvgam","text":"brief summary model's call printed","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/print.mvgam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary for a fitted mvgam object — print.mvgam","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/score.mvgam_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probabilistic forecast scores for mvgam objects — score.mvgam_forecast","title":"Compute probabilistic forecast scores for mvgam objects — score.mvgam_forecast","text":"Compute probabilistic forecast scores mvgam objects","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/score.mvgam_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probabilistic forecast scores for mvgam objects — score.mvgam_forecast","text":"","code":"# S3 method for mvgam_forecast score(object, score, log = FALSE, weights, interval_width = 0.9)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/score.mvgam_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probabilistic forecast scores for mvgam objects — score.mvgam_forecast","text":"object list object returned forecast.mvgam. test data supplied forecast.mvgam contained sample test observations, calibration probabilistic forecasts can scored using proper scoring rules score character specifying type ranked probability score use evaluation. Options : variogram, drps crps log logical. forecasts truths logged prior scoring? often appropriate comparing performance models series vary observation ranges weights optional vector weights (length(weights) == n_series) weighting pairwise correlations evaluating variogram score multivariate forecasts. Useful -weighting series larger magnitude observations less interest forecasting. Ignored score != 'variogram' interval_width proportional value [0.05,0.95] defining forecast interval calculating coverage","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/score.mvgam_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probabilistic forecast scores for mvgam objects — score.mvgam_forecast","text":"list containing scores 90% interval coverages per forecast horizon. score %% c('drps', 'crps'), list also contain return sum series-level scores per horizon. score == 'variogram', series-level scores computed score returned series. scores, in_interval column series-level slot binary indicator whether true value within forecast's corresponding posterior empirical quantiles","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/series_to_mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"This function converts univariate or multivariate time series (xts or ts objects)\r\nto the format necessary for mvgam — series_to_mvgam","title":"This function converts univariate or multivariate time series (xts or ts objects)\r\nto the format necessary for mvgam — series_to_mvgam","text":"function converts univariate multivariate time series (xts ts objects) format necessary mvgam","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/series_to_mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function converts univariate or multivariate time series (xts or ts objects)\r\nto the format necessary for mvgam — series_to_mvgam","text":"","code":"series_to_mvgam(series, freq, train_prop = 0.85)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/series_to_mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function converts univariate or multivariate time series (xts or ts objects)\r\nto the format necessary for mvgam — series_to_mvgam","text":"series xts ts object converted mvgam format freq integer. seasonal frequency series train_prop numeric stating proportion data use training. 0.25 0.95","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/series_to_mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function converts univariate or multivariate time series (xts or ts objects)\r\nto the format necessary for mvgam — series_to_mvgam","text":"list object containing outputs needed mvgam, including 'data_train' 'data_test'","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/series_to_mvgam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function converts univariate or multivariate time series (xts or ts objects)\r\nto the format necessary for mvgam — series_to_mvgam","text":"","code":"# A ts object example library(forecast) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo  #>  #> Attaching package: 'forecast' #> The following object is masked from 'package:mvgam': #>  #>     forecast #> The following object is masked from 'package:nlme': #>  #>     getResponse data(\"AirPassengers\") series <- cbind(AirPassengers, AirPassengers) colnames(series) <- c('blood', 'bone') series_to_mvgam(series, frequency(series), 0.85) #> $data_train #>       y season year                date series time #> 1   112      1 1949 1949-01-01 00:00:00  blood    1 #> 2   112      1 1949 1949-01-01 00:00:00   bone    1 #> 3   118      2 1949 1949-01-31 10:00:00  blood    2 #> 4   118      2 1949 1949-01-31 10:00:00   bone    2 #> 5   132      3 1949 1949-03-02 20:00:01  blood    3 #> 6   132      3 1949 1949-03-02 20:00:01   bone    3 #> 7   129      4 1949 1949-04-02 06:00:00  blood    4 #> 8   129      4 1949 1949-04-02 06:00:00   bone    4 #> 9   121      5 1949 1949-05-02 16:00:00  blood    5 #> 10  121      5 1949 1949-05-02 16:00:00   bone    5 #> 11  135      6 1949 1949-06-02 02:00:01  blood    6 #> 12  135      6 1949 1949-06-02 02:00:01   bone    6 #> 13  148      7 1949 1949-07-02 12:00:00  blood    7 #> 14  148      7 1949 1949-07-02 12:00:00   bone    7 #> 15  148      8 1949 1949-08-01 22:00:00  blood    8 #> 16  148      8 1949 1949-08-01 22:00:00   bone    8 #> 17  136      9 1949 1949-09-01 08:00:01  blood    9 #> 18  136      9 1949 1949-09-01 08:00:01   bone    9 #> 19  119     10 1949 1949-10-01 18:00:00  blood   10 #> 20  119     10 1949 1949-10-01 18:00:00   bone   10 #> 21  104     11 1949 1949-11-01 04:00:00  blood   11 #> 22  104     11 1949 1949-11-01 04:00:00   bone   11 #> 23  118     12 1949 1949-12-01 14:00:01  blood   12 #> 24  118     12 1949 1949-12-01 14:00:01   bone   12 #> 25  115      1 1950 1950-01-01 00:00:00  blood   13 #> 26  115      1 1950 1950-01-01 00:00:00   bone   13 #> 27  126      2 1950 1950-01-31 10:00:00  blood   14 #> 28  126      2 1950 1950-01-31 10:00:00   bone   14 #> 29  141      3 1950 1950-03-02 20:00:01  blood   15 #> 30  141      3 1950 1950-03-02 20:00:01   bone   15 #> 31  135      4 1950 1950-04-02 06:00:00  blood   16 #> 32  135      4 1950 1950-04-02 06:00:00   bone   16 #> 33  125      5 1950 1950-05-02 16:00:00  blood   17 #> 34  125      5 1950 1950-05-02 16:00:00   bone   17 #> 35  149      6 1950 1950-06-02 02:00:01  blood   18 #> 36  149      6 1950 1950-06-02 02:00:01   bone   18 #> 37  170      7 1950 1950-07-02 12:00:00  blood   19 #> 38  170      7 1950 1950-07-02 12:00:00   bone   19 #> 39  170      8 1950 1950-08-01 22:00:00  blood   20 #> 40  170      8 1950 1950-08-01 22:00:00   bone   20 #> 41  158      9 1950 1950-09-01 08:00:01  blood   21 #> 42  158      9 1950 1950-09-01 08:00:01   bone   21 #> 43  133     10 1950 1950-10-01 18:00:00  blood   22 #> 44  133     10 1950 1950-10-01 18:00:00   bone   22 #> 45  114     11 1950 1950-11-01 04:00:00  blood   23 #> 46  114     11 1950 1950-11-01 04:00:00   bone   23 #> 47  140     12 1950 1950-12-01 14:00:01  blood   24 #> 48  140     12 1950 1950-12-01 14:00:01   bone   24 #> 49  145      1 1951 1951-01-01 00:00:00  blood   25 #> 50  145      1 1951 1951-01-01 00:00:00   bone   25 #> 51  150      2 1951 1951-01-31 10:00:00  blood   26 #> 52  150      2 1951 1951-01-31 10:00:00   bone   26 #> 53  178      3 1951 1951-03-02 20:00:01  blood   27 #> 54  178      3 1951 1951-03-02 20:00:01   bone   27 #> 55  163      4 1951 1951-04-02 06:00:00  blood   28 #> 56  163      4 1951 1951-04-02 06:00:00   bone   28 #> 57  172      5 1951 1951-05-02 16:00:00  blood   29 #> 58  172      5 1951 1951-05-02 16:00:00   bone   29 #> 59  178      6 1951 1951-06-02 02:00:01  blood   30 #> 60  178      6 1951 1951-06-02 02:00:01   bone   30 #> 61  199      7 1951 1951-07-02 12:00:00  blood   31 #> 62  199      7 1951 1951-07-02 12:00:00   bone   31 #> 63  199      8 1951 1951-08-01 22:00:00  blood   32 #> 64  199      8 1951 1951-08-01 22:00:00   bone   32 #> 65  184      9 1951 1951-09-01 08:00:01  blood   33 #> 66  184      9 1951 1951-09-01 08:00:01   bone   33 #> 67  162     10 1951 1951-10-01 18:00:00  blood   34 #> 68  162     10 1951 1951-10-01 18:00:00   bone   34 #> 69  146     11 1951 1951-11-01 04:00:00  blood   35 #> 70  146     11 1951 1951-11-01 04:00:00   bone   35 #> 71  166     12 1951 1951-12-01 14:00:01  blood   36 #> 72  166     12 1951 1951-12-01 14:00:01   bone   36 #> 73  171      1 1952 1952-01-01 00:00:00  blood   37 #> 74  171      1 1952 1952-01-01 00:00:00   bone   37 #> 75  180      2 1952 1952-01-31 12:00:00  blood   38 #> 76  180      2 1952 1952-01-31 12:00:00   bone   38 #> 77  193      3 1952 1952-03-02 00:00:01  blood   39 #> 78  193      3 1952 1952-03-02 00:00:01   bone   39 #> 79  181      4 1952 1952-04-01 12:00:00  blood   40 #> 80  181      4 1952 1952-04-01 12:00:00   bone   40 #> 81  183      5 1952 1952-05-02 00:00:00  blood   41 #> 82  183      5 1952 1952-05-02 00:00:00   bone   41 #> 83  218      6 1952 1952-06-01 12:00:01  blood   42 #> 84  218      6 1952 1952-06-01 12:00:01   bone   42 #> 85  230      7 1952 1952-07-02 00:00:00  blood   43 #> 86  230      7 1952 1952-07-02 00:00:00   bone   43 #> 87  242      8 1952 1952-08-01 12:00:00  blood   44 #> 88  242      8 1952 1952-08-01 12:00:00   bone   44 #> 89  209      9 1952 1952-09-01 00:00:01  blood   45 #> 90  209      9 1952 1952-09-01 00:00:01   bone   45 #> 91  191     10 1952 1952-10-01 12:00:00  blood   46 #> 92  191     10 1952 1952-10-01 12:00:00   bone   46 #> 93  172     11 1952 1952-11-01 00:00:00  blood   47 #> 94  172     11 1952 1952-11-01 00:00:00   bone   47 #> 95  194     12 1952 1952-12-01 12:00:01  blood   48 #> 96  194     12 1952 1952-12-01 12:00:01   bone   48 #> 97  196      1 1953 1953-01-01 00:00:00  blood   49 #> 98  196      1 1953 1953-01-01 00:00:00   bone   49 #> 99  196      2 1953 1953-01-31 10:00:00  blood   50 #> 100 196      2 1953 1953-01-31 10:00:00   bone   50 #> 101 236      3 1953 1953-03-02 20:00:01  blood   51 #> 102 236      3 1953 1953-03-02 20:00:01   bone   51 #> 103 235      4 1953 1953-04-02 06:00:00  blood   52 #> 104 235      4 1953 1953-04-02 06:00:00   bone   52 #> 105 229      5 1953 1953-05-02 16:00:00  blood   53 #> 106 229      5 1953 1953-05-02 16:00:00   bone   53 #> 107 243      6 1953 1953-06-02 02:00:01  blood   54 #> 108 243      6 1953 1953-06-02 02:00:01   bone   54 #> 109 264      7 1953 1953-07-02 12:00:00  blood   55 #> 110 264      7 1953 1953-07-02 12:00:00   bone   55 #> 111 272      8 1953 1953-08-01 22:00:00  blood   56 #> 112 272      8 1953 1953-08-01 22:00:00   bone   56 #> 113 237      9 1953 1953-09-01 08:00:01  blood   57 #> 114 237      9 1953 1953-09-01 08:00:01   bone   57 #> 115 211     10 1953 1953-10-01 18:00:00  blood   58 #> 116 211     10 1953 1953-10-01 18:00:00   bone   58 #> 117 180     11 1953 1953-11-01 04:00:00  blood   59 #> 118 180     11 1953 1953-11-01 04:00:00   bone   59 #> 119 201     12 1953 1953-12-01 14:00:01  blood   60 #> 120 201     12 1953 1953-12-01 14:00:01   bone   60 #> 121 204      1 1954 1954-01-01 00:00:00  blood   61 #> 122 204      1 1954 1954-01-01 00:00:00   bone   61 #> 123 188      2 1954 1954-01-31 10:00:00  blood   62 #> 124 188      2 1954 1954-01-31 10:00:00   bone   62 #> 125 235      3 1954 1954-03-02 20:00:01  blood   63 #> 126 235      3 1954 1954-03-02 20:00:01   bone   63 #> 127 227      4 1954 1954-04-02 06:00:00  blood   64 #> 128 227      4 1954 1954-04-02 06:00:00   bone   64 #> 129 234      5 1954 1954-05-02 16:00:00  blood   65 #> 130 234      5 1954 1954-05-02 16:00:00   bone   65 #> 131 264      6 1954 1954-06-02 02:00:01  blood   66 #> 132 264      6 1954 1954-06-02 02:00:01   bone   66 #> 133 302      7 1954 1954-07-02 12:00:00  blood   67 #> 134 302      7 1954 1954-07-02 12:00:00   bone   67 #> 135 293      8 1954 1954-08-01 22:00:00  blood   68 #> 136 293      8 1954 1954-08-01 22:00:00   bone   68 #> 137 259      9 1954 1954-09-01 08:00:01  blood   69 #> 138 259      9 1954 1954-09-01 08:00:01   bone   69 #> 139 229     10 1954 1954-10-01 18:00:00  blood   70 #> 140 229     10 1954 1954-10-01 18:00:00   bone   70 #> 141 203     11 1954 1954-11-01 04:00:01  blood   71 #> 142 203     11 1954 1954-11-01 04:00:01   bone   71 #> 143 229     12 1954 1954-12-01 14:00:01  blood   72 #> 144 229     12 1954 1954-12-01 14:00:01   bone   72 #> 145 242      1 1955 1955-01-01 00:00:00  blood   73 #> 146 242      1 1955 1955-01-01 00:00:00   bone   73 #> 147 233      2 1955 1955-01-31 10:00:01  blood   74 #> 148 233      2 1955 1955-01-31 10:00:01   bone   74 #> 149 267      3 1955 1955-03-02 20:00:01  blood   75 #> 150 267      3 1955 1955-03-02 20:00:01   bone   75 #> 151 269      4 1955 1955-04-02 06:00:00  blood   76 #> 152 269      4 1955 1955-04-02 06:00:00   bone   76 #> 153 270      5 1955 1955-05-02 16:00:01  blood   77 #> 154 270      5 1955 1955-05-02 16:00:01   bone   77 #> 155 315      6 1955 1955-06-02 02:00:01  blood   78 #> 156 315      6 1955 1955-06-02 02:00:01   bone   78 #> 157 364      7 1955 1955-07-02 12:00:00  blood   79 #> 158 364      7 1955 1955-07-02 12:00:00   bone   79 #> 159 347      8 1955 1955-08-01 22:00:01  blood   80 #> 160 347      8 1955 1955-08-01 22:00:01   bone   80 #> 161 312      9 1955 1955-09-01 08:00:01  blood   81 #> 162 312      9 1955 1955-09-01 08:00:01   bone   81 #> 163 274     10 1955 1955-10-01 18:00:00  blood   82 #> 164 274     10 1955 1955-10-01 18:00:00   bone   82 #> 165 237     11 1955 1955-11-01 04:00:01  blood   83 #> 166 237     11 1955 1955-11-01 04:00:01   bone   83 #> 167 278     12 1955 1955-12-01 14:00:01  blood   84 #> 168 278     12 1955 1955-12-01 14:00:01   bone   84 #> 169 284      1 1956 1956-01-01 00:00:00  blood   85 #> 170 284      1 1956 1956-01-01 00:00:00   bone   85 #> 171 277      2 1956 1956-01-31 12:00:01  blood   86 #> 172 277      2 1956 1956-01-31 12:00:01   bone   86 #> 173 317      3 1956 1956-03-02 00:00:01  blood   87 #> 174 317      3 1956 1956-03-02 00:00:01   bone   87 #> 175 313      4 1956 1956-04-01 12:00:00  blood   88 #> 176 313      4 1956 1956-04-01 12:00:00   bone   88 #> 177 318      5 1956 1956-05-02 00:00:01  blood   89 #> 178 318      5 1956 1956-05-02 00:00:01   bone   89 #> 179 374      6 1956 1956-06-01 12:00:01  blood   90 #> 180 374      6 1956 1956-06-01 12:00:01   bone   90 #> 181 413      7 1956 1956-07-02 00:00:00  blood   91 #> 182 413      7 1956 1956-07-02 00:00:00   bone   91 #> 183 405      8 1956 1956-08-01 12:00:01  blood   92 #> 184 405      8 1956 1956-08-01 12:00:01   bone   92 #> 185 355      9 1956 1956-09-01 00:00:01  blood   93 #> 186 355      9 1956 1956-09-01 00:00:01   bone   93 #> 187 306     10 1956 1956-10-01 12:00:00  blood   94 #> 188 306     10 1956 1956-10-01 12:00:00   bone   94 #> 189 271     11 1956 1956-11-01 00:00:01  blood   95 #> 190 271     11 1956 1956-11-01 00:00:01   bone   95 #> 191 306     12 1956 1956-12-01 12:00:01  blood   96 #> 192 306     12 1956 1956-12-01 12:00:01   bone   96 #> 193 315      1 1957 1957-01-01 00:00:00  blood   97 #> 194 315      1 1957 1957-01-01 00:00:00   bone   97 #> 195 301      2 1957 1957-01-31 10:00:01  blood   98 #> 196 301      2 1957 1957-01-31 10:00:01   bone   98 #> 197 356      3 1957 1957-03-02 20:00:01  blood   99 #> 198 356      3 1957 1957-03-02 20:00:01   bone   99 #> 199 348      4 1957 1957-04-02 06:00:00  blood  100 #> 200 348      4 1957 1957-04-02 06:00:00   bone  100 #> 201 355      5 1957 1957-05-02 16:00:01  blood  101 #> 202 355      5 1957 1957-05-02 16:00:01   bone  101 #> 203 422      6 1957 1957-06-02 02:00:01  blood  102 #> 204 422      6 1957 1957-06-02 02:00:01   bone  102 #> 205 465      7 1957 1957-07-02 12:00:00  blood  103 #> 206 465      7 1957 1957-07-02 12:00:00   bone  103 #> 207 467      8 1957 1957-08-01 22:00:01  blood  104 #> 208 467      8 1957 1957-08-01 22:00:01   bone  104 #> 209 404      9 1957 1957-09-01 08:00:01  blood  105 #> 210 404      9 1957 1957-09-01 08:00:01   bone  105 #> 211 347     10 1957 1957-10-01 18:00:00  blood  106 #> 212 347     10 1957 1957-10-01 18:00:00   bone  106 #> 213 305     11 1957 1957-11-01 04:00:01  blood  107 #> 214 305     11 1957 1957-11-01 04:00:01   bone  107 #> 215 336     12 1957 1957-12-01 14:00:01  blood  108 #> 216 336     12 1957 1957-12-01 14:00:01   bone  108 #> 217 340      1 1958 1958-01-01 00:00:00  blood  109 #> 218 340      1 1958 1958-01-01 00:00:00   bone  109 #> 219 318      2 1958 1958-01-31 10:00:01  blood  110 #> 220 318      2 1958 1958-01-31 10:00:01   bone  110 #> 221 362      3 1958 1958-03-02 20:00:01  blood  111 #> 222 362      3 1958 1958-03-02 20:00:01   bone  111 #> 223 348      4 1958 1958-04-02 06:00:00  blood  112 #> 224 348      4 1958 1958-04-02 06:00:00   bone  112 #> 225 363      5 1958 1958-05-02 16:00:01  blood  113 #> 226 363      5 1958 1958-05-02 16:00:01   bone  113 #> 227 435      6 1958 1958-06-02 02:00:01  blood  114 #> 228 435      6 1958 1958-06-02 02:00:01   bone  114 #> 229 491      7 1958 1958-07-02 12:00:00  blood  115 #> 230 491      7 1958 1958-07-02 12:00:00   bone  115 #> 231 505      8 1958 1958-08-01 22:00:01  blood  116 #> 232 505      8 1958 1958-08-01 22:00:01   bone  116 #> 233 404      9 1958 1958-09-01 08:00:01  blood  117 #> 234 404      9 1958 1958-09-01 08:00:01   bone  117 #> 235 359     10 1958 1958-10-01 18:00:00  blood  118 #> 236 359     10 1958 1958-10-01 18:00:00   bone  118 #> 237 310     11 1958 1958-11-01 04:00:01  blood  119 #> 238 310     11 1958 1958-11-01 04:00:01   bone  119 #> 239 337     12 1958 1958-12-01 14:00:01  blood  120 #> 240 337     12 1958 1958-12-01 14:00:01   bone  120 #> 241 360      1 1959 1959-01-01 00:00:00  blood  121 #> 242 360      1 1959 1959-01-01 00:00:00   bone  121 #> 243 342      2 1959 1959-01-31 10:00:01  blood  122 #> 244 342      2 1959 1959-01-31 10:00:01   bone  122 #>  #> $data_test #>      y season year                date series time #> 1  406      3 1959 1959-03-02 20:00:01  blood  123 #> 2  406      3 1959 1959-03-02 20:00:01   bone  123 #> 3  396      4 1959 1959-04-02 06:00:00  blood  124 #> 4  396      4 1959 1959-04-02 06:00:00   bone  124 #> 5  420      5 1959 1959-05-02 16:00:01  blood  125 #> 6  420      5 1959 1959-05-02 16:00:01   bone  125 #> 7  472      6 1959 1959-06-02 02:00:01  blood  126 #> 8  472      6 1959 1959-06-02 02:00:01   bone  126 #> 9  548      7 1959 1959-07-02 12:00:00  blood  127 #> 10 548      7 1959 1959-07-02 12:00:00   bone  127 #> 11 559      8 1959 1959-08-01 22:00:01  blood  128 #> 12 559      8 1959 1959-08-01 22:00:01   bone  128 #> 13 463      9 1959 1959-09-01 08:00:01  blood  129 #> 14 463      9 1959 1959-09-01 08:00:01   bone  129 #> 15 407     10 1959 1959-10-01 18:00:00  blood  130 #> 16 407     10 1959 1959-10-01 18:00:00   bone  130 #> 17 362     11 1959 1959-11-01 04:00:01  blood  131 #> 18 362     11 1959 1959-11-01 04:00:01   bone  131 #> 19 405     12 1959 1959-12-01 14:00:01  blood  132 #> 20 405     12 1959 1959-12-01 14:00:01   bone  132 #> 21 417      1 1960 1960-01-01 00:00:00  blood  133 #> 22 417      1 1960 1960-01-01 00:00:00   bone  133 #> 23 391      2 1960 1960-01-31 12:00:01  blood  134 #> 24 391      2 1960 1960-01-31 12:00:01   bone  134 #> 25 419      3 1960 1960-03-02 00:00:01  blood  135 #> 26 419      3 1960 1960-03-02 00:00:01   bone  135 #> 27 461      4 1960 1960-04-01 12:00:00  blood  136 #> 28 461      4 1960 1960-04-01 12:00:00   bone  136 #> 29 472      5 1960 1960-05-02 00:00:01  blood  137 #> 30 472      5 1960 1960-05-02 00:00:01   bone  137 #> 31 535      6 1960 1960-06-01 12:00:01  blood  138 #> 32 535      6 1960 1960-06-01 12:00:01   bone  138 #> 33 622      7 1960 1960-07-02 00:00:00  blood  139 #> 34 622      7 1960 1960-07-02 00:00:00   bone  139 #> 35 606      8 1960 1960-08-01 12:00:01  blood  140 #> 36 606      8 1960 1960-08-01 12:00:01   bone  140 #> 37 508      9 1960 1960-09-01 00:00:01  blood  141 #> 38 508      9 1960 1960-09-01 00:00:01   bone  141 #> 39 461     10 1960 1960-10-01 12:00:00  blood  142 #> 40 461     10 1960 1960-10-01 12:00:00   bone  142 #> 41 390     11 1960 1960-11-01 00:00:01  blood  143 #> 42 390     11 1960 1960-11-01 00:00:01   bone  143 #> 43 432     12 1960 1960-12-01 12:00:01  blood  144 #> 44 432     12 1960 1960-12-01 12:00:01   bone  144 #>   # An xts object example dates <- seq(as.Date(\"2001-05-01\"), length=30, by=\"quarter\") data  <- cbind(c(gas = rpois(30, cumprod(1+rnorm(30, mean = 0.01, sd = 0.001)))), c(oil = rpois(30, cumprod(1+rnorm(30, mean = 0.01, sd = 0.001))))) series <- xts(x = data, order.by = dates) #> Error in xts(x = data, order.by = dates): could not find function \"xts\" colnames(series) <- c('gas', 'oil') head(series) #>          gas oil #> Jan 1949 112 112 #> Feb 1949 118 118 #> Mar 1949 132 132 #> Apr 1949 129 129 #> May 1949 121 121 #> Jun 1949 135 135 series_to_mvgam(series, freq = 4, train_prop = 0.85) #> $data_train #>       y season year                date series time #> 1   112      1 1949 1949-01-01 00:00:00    gas    1 #> 2   112      1 1949 1949-01-01 00:00:00    oil    1 #> 3   118      2 1949 1949-01-31 10:00:00    gas    2 #> 4   118      2 1949 1949-01-31 10:00:00    oil    2 #> 5   132      3 1949 1949-03-02 20:00:01    gas    3 #> 6   132      3 1949 1949-03-02 20:00:01    oil    3 #> 7   129      4 1949 1949-04-02 06:00:00    gas    4 #> 8   129      4 1949 1949-04-02 06:00:00    oil    4 #> 9   121      5 1949 1949-05-02 16:00:00    gas    5 #> 10  121      5 1949 1949-05-02 16:00:00    oil    5 #> 11  135      6 1949 1949-06-02 02:00:01    gas    6 #> 12  135      6 1949 1949-06-02 02:00:01    oil    6 #> 13  148      7 1949 1949-07-02 12:00:00    gas    7 #> 14  148      7 1949 1949-07-02 12:00:00    oil    7 #> 15  148      8 1949 1949-08-01 22:00:00    gas    8 #> 16  148      8 1949 1949-08-01 22:00:00    oil    8 #> 17  136      9 1949 1949-09-01 08:00:01    gas    9 #> 18  136      9 1949 1949-09-01 08:00:01    oil    9 #> 19  119     10 1949 1949-10-01 18:00:00    gas   10 #> 20  119     10 1949 1949-10-01 18:00:00    oil   10 #> 21  104     11 1949 1949-11-01 04:00:00    gas   11 #> 22  104     11 1949 1949-11-01 04:00:00    oil   11 #> 23  118     12 1949 1949-12-01 14:00:01    gas   12 #> 24  118     12 1949 1949-12-01 14:00:01    oil   12 #> 25  115      1 1950 1950-01-01 00:00:00    gas   13 #> 26  115      1 1950 1950-01-01 00:00:00    oil   13 #> 27  126      2 1950 1950-01-31 10:00:00    gas   14 #> 28  126      2 1950 1950-01-31 10:00:00    oil   14 #> 29  141      3 1950 1950-03-02 20:00:01    gas   15 #> 30  141      3 1950 1950-03-02 20:00:01    oil   15 #> 31  135      4 1950 1950-04-02 06:00:00    gas   16 #> 32  135      4 1950 1950-04-02 06:00:00    oil   16 #> 33  125      5 1950 1950-05-02 16:00:00    gas   17 #> 34  125      5 1950 1950-05-02 16:00:00    oil   17 #> 35  149      6 1950 1950-06-02 02:00:01    gas   18 #> 36  149      6 1950 1950-06-02 02:00:01    oil   18 #> 37  170      7 1950 1950-07-02 12:00:00    gas   19 #> 38  170      7 1950 1950-07-02 12:00:00    oil   19 #> 39  170      8 1950 1950-08-01 22:00:00    gas   20 #> 40  170      8 1950 1950-08-01 22:00:00    oil   20 #> 41  158      9 1950 1950-09-01 08:00:01    gas   21 #> 42  158      9 1950 1950-09-01 08:00:01    oil   21 #> 43  133     10 1950 1950-10-01 18:00:00    gas   22 #> 44  133     10 1950 1950-10-01 18:00:00    oil   22 #> 45  114     11 1950 1950-11-01 04:00:00    gas   23 #> 46  114     11 1950 1950-11-01 04:00:00    oil   23 #> 47  140     12 1950 1950-12-01 14:00:01    gas   24 #> 48  140     12 1950 1950-12-01 14:00:01    oil   24 #> 49  145      1 1951 1951-01-01 00:00:00    gas   25 #> 50  145      1 1951 1951-01-01 00:00:00    oil   25 #> 51  150      2 1951 1951-01-31 10:00:00    gas   26 #> 52  150      2 1951 1951-01-31 10:00:00    oil   26 #> 53  178      3 1951 1951-03-02 20:00:01    gas   27 #> 54  178      3 1951 1951-03-02 20:00:01    oil   27 #> 55  163      4 1951 1951-04-02 06:00:00    gas   28 #> 56  163      4 1951 1951-04-02 06:00:00    oil   28 #> 57  172      5 1951 1951-05-02 16:00:00    gas   29 #> 58  172      5 1951 1951-05-02 16:00:00    oil   29 #> 59  178      6 1951 1951-06-02 02:00:01    gas   30 #> 60  178      6 1951 1951-06-02 02:00:01    oil   30 #> 61  199      7 1951 1951-07-02 12:00:00    gas   31 #> 62  199      7 1951 1951-07-02 12:00:00    oil   31 #> 63  199      8 1951 1951-08-01 22:00:00    gas   32 #> 64  199      8 1951 1951-08-01 22:00:00    oil   32 #> 65  184      9 1951 1951-09-01 08:00:01    gas   33 #> 66  184      9 1951 1951-09-01 08:00:01    oil   33 #> 67  162     10 1951 1951-10-01 18:00:00    gas   34 #> 68  162     10 1951 1951-10-01 18:00:00    oil   34 #> 69  146     11 1951 1951-11-01 04:00:00    gas   35 #> 70  146     11 1951 1951-11-01 04:00:00    oil   35 #> 71  166     12 1951 1951-12-01 14:00:01    gas   36 #> 72  166     12 1951 1951-12-01 14:00:01    oil   36 #> 73  171      1 1952 1952-01-01 00:00:00    gas   37 #> 74  171      1 1952 1952-01-01 00:00:00    oil   37 #> 75  180      2 1952 1952-01-31 12:00:00    gas   38 #> 76  180      2 1952 1952-01-31 12:00:00    oil   38 #> 77  193      3 1952 1952-03-02 00:00:01    gas   39 #> 78  193      3 1952 1952-03-02 00:00:01    oil   39 #> 79  181      4 1952 1952-04-01 12:00:00    gas   40 #> 80  181      4 1952 1952-04-01 12:00:00    oil   40 #> 81  183      5 1952 1952-05-02 00:00:00    gas   41 #> 82  183      5 1952 1952-05-02 00:00:00    oil   41 #> 83  218      6 1952 1952-06-01 12:00:01    gas   42 #> 84  218      6 1952 1952-06-01 12:00:01    oil   42 #> 85  230      7 1952 1952-07-02 00:00:00    gas   43 #> 86  230      7 1952 1952-07-02 00:00:00    oil   43 #> 87  242      8 1952 1952-08-01 12:00:00    gas   44 #> 88  242      8 1952 1952-08-01 12:00:00    oil   44 #> 89  209      9 1952 1952-09-01 00:00:01    gas   45 #> 90  209      9 1952 1952-09-01 00:00:01    oil   45 #> 91  191     10 1952 1952-10-01 12:00:00    gas   46 #> 92  191     10 1952 1952-10-01 12:00:00    oil   46 #> 93  172     11 1952 1952-11-01 00:00:00    gas   47 #> 94  172     11 1952 1952-11-01 00:00:00    oil   47 #> 95  194     12 1952 1952-12-01 12:00:01    gas   48 #> 96  194     12 1952 1952-12-01 12:00:01    oil   48 #> 97  196      1 1953 1953-01-01 00:00:00    gas   49 #> 98  196      1 1953 1953-01-01 00:00:00    oil   49 #> 99  196      2 1953 1953-01-31 10:00:00    gas   50 #> 100 196      2 1953 1953-01-31 10:00:00    oil   50 #> 101 236      3 1953 1953-03-02 20:00:01    gas   51 #> 102 236      3 1953 1953-03-02 20:00:01    oil   51 #> 103 235      4 1953 1953-04-02 06:00:00    gas   52 #> 104 235      4 1953 1953-04-02 06:00:00    oil   52 #> 105 229      5 1953 1953-05-02 16:00:00    gas   53 #> 106 229      5 1953 1953-05-02 16:00:00    oil   53 #> 107 243      6 1953 1953-06-02 02:00:01    gas   54 #> 108 243      6 1953 1953-06-02 02:00:01    oil   54 #> 109 264      7 1953 1953-07-02 12:00:00    gas   55 #> 110 264      7 1953 1953-07-02 12:00:00    oil   55 #> 111 272      8 1953 1953-08-01 22:00:00    gas   56 #> 112 272      8 1953 1953-08-01 22:00:00    oil   56 #> 113 237      9 1953 1953-09-01 08:00:01    gas   57 #> 114 237      9 1953 1953-09-01 08:00:01    oil   57 #> 115 211     10 1953 1953-10-01 18:00:00    gas   58 #> 116 211     10 1953 1953-10-01 18:00:00    oil   58 #> 117 180     11 1953 1953-11-01 04:00:00    gas   59 #> 118 180     11 1953 1953-11-01 04:00:00    oil   59 #> 119 201     12 1953 1953-12-01 14:00:01    gas   60 #> 120 201     12 1953 1953-12-01 14:00:01    oil   60 #> 121 204      1 1954 1954-01-01 00:00:00    gas   61 #> 122 204      1 1954 1954-01-01 00:00:00    oil   61 #> 123 188      2 1954 1954-01-31 10:00:00    gas   62 #> 124 188      2 1954 1954-01-31 10:00:00    oil   62 #> 125 235      3 1954 1954-03-02 20:00:01    gas   63 #> 126 235      3 1954 1954-03-02 20:00:01    oil   63 #> 127 227      4 1954 1954-04-02 06:00:00    gas   64 #> 128 227      4 1954 1954-04-02 06:00:00    oil   64 #> 129 234      5 1954 1954-05-02 16:00:00    gas   65 #> 130 234      5 1954 1954-05-02 16:00:00    oil   65 #> 131 264      6 1954 1954-06-02 02:00:01    gas   66 #> 132 264      6 1954 1954-06-02 02:00:01    oil   66 #> 133 302      7 1954 1954-07-02 12:00:00    gas   67 #> 134 302      7 1954 1954-07-02 12:00:00    oil   67 #> 135 293      8 1954 1954-08-01 22:00:00    gas   68 #> 136 293      8 1954 1954-08-01 22:00:00    oil   68 #> 137 259      9 1954 1954-09-01 08:00:01    gas   69 #> 138 259      9 1954 1954-09-01 08:00:01    oil   69 #> 139 229     10 1954 1954-10-01 18:00:00    gas   70 #> 140 229     10 1954 1954-10-01 18:00:00    oil   70 #> 141 203     11 1954 1954-11-01 04:00:01    gas   71 #> 142 203     11 1954 1954-11-01 04:00:01    oil   71 #> 143 229     12 1954 1954-12-01 14:00:01    gas   72 #> 144 229     12 1954 1954-12-01 14:00:01    oil   72 #> 145 242      1 1955 1955-01-01 00:00:00    gas   73 #> 146 242      1 1955 1955-01-01 00:00:00    oil   73 #> 147 233      2 1955 1955-01-31 10:00:01    gas   74 #> 148 233      2 1955 1955-01-31 10:00:01    oil   74 #> 149 267      3 1955 1955-03-02 20:00:01    gas   75 #> 150 267      3 1955 1955-03-02 20:00:01    oil   75 #> 151 269      4 1955 1955-04-02 06:00:00    gas   76 #> 152 269      4 1955 1955-04-02 06:00:00    oil   76 #> 153 270      5 1955 1955-05-02 16:00:01    gas   77 #> 154 270      5 1955 1955-05-02 16:00:01    oil   77 #> 155 315      6 1955 1955-06-02 02:00:01    gas   78 #> 156 315      6 1955 1955-06-02 02:00:01    oil   78 #> 157 364      7 1955 1955-07-02 12:00:00    gas   79 #> 158 364      7 1955 1955-07-02 12:00:00    oil   79 #> 159 347      8 1955 1955-08-01 22:00:01    gas   80 #> 160 347      8 1955 1955-08-01 22:00:01    oil   80 #> 161 312      9 1955 1955-09-01 08:00:01    gas   81 #> 162 312      9 1955 1955-09-01 08:00:01    oil   81 #> 163 274     10 1955 1955-10-01 18:00:00    gas   82 #> 164 274     10 1955 1955-10-01 18:00:00    oil   82 #> 165 237     11 1955 1955-11-01 04:00:01    gas   83 #> 166 237     11 1955 1955-11-01 04:00:01    oil   83 #> 167 278     12 1955 1955-12-01 14:00:01    gas   84 #> 168 278     12 1955 1955-12-01 14:00:01    oil   84 #> 169 284      1 1956 1956-01-01 00:00:00    gas   85 #> 170 284      1 1956 1956-01-01 00:00:00    oil   85 #> 171 277      2 1956 1956-01-31 12:00:01    gas   86 #> 172 277      2 1956 1956-01-31 12:00:01    oil   86 #> 173 317      3 1956 1956-03-02 00:00:01    gas   87 #> 174 317      3 1956 1956-03-02 00:00:01    oil   87 #> 175 313      4 1956 1956-04-01 12:00:00    gas   88 #> 176 313      4 1956 1956-04-01 12:00:00    oil   88 #> 177 318      5 1956 1956-05-02 00:00:01    gas   89 #> 178 318      5 1956 1956-05-02 00:00:01    oil   89 #> 179 374      6 1956 1956-06-01 12:00:01    gas   90 #> 180 374      6 1956 1956-06-01 12:00:01    oil   90 #> 181 413      7 1956 1956-07-02 00:00:00    gas   91 #> 182 413      7 1956 1956-07-02 00:00:00    oil   91 #> 183 405      8 1956 1956-08-01 12:00:01    gas   92 #> 184 405      8 1956 1956-08-01 12:00:01    oil   92 #> 185 355      9 1956 1956-09-01 00:00:01    gas   93 #> 186 355      9 1956 1956-09-01 00:00:01    oil   93 #> 187 306     10 1956 1956-10-01 12:00:00    gas   94 #> 188 306     10 1956 1956-10-01 12:00:00    oil   94 #> 189 271     11 1956 1956-11-01 00:00:01    gas   95 #> 190 271     11 1956 1956-11-01 00:00:01    oil   95 #> 191 306     12 1956 1956-12-01 12:00:01    gas   96 #> 192 306     12 1956 1956-12-01 12:00:01    oil   96 #> 193 315      1 1957 1957-01-01 00:00:00    gas   97 #> 194 315      1 1957 1957-01-01 00:00:00    oil   97 #> 195 301      2 1957 1957-01-31 10:00:01    gas   98 #> 196 301      2 1957 1957-01-31 10:00:01    oil   98 #> 197 356      3 1957 1957-03-02 20:00:01    gas   99 #> 198 356      3 1957 1957-03-02 20:00:01    oil   99 #> 199 348      4 1957 1957-04-02 06:00:00    gas  100 #> 200 348      4 1957 1957-04-02 06:00:00    oil  100 #> 201 355      5 1957 1957-05-02 16:00:01    gas  101 #> 202 355      5 1957 1957-05-02 16:00:01    oil  101 #> 203 422      6 1957 1957-06-02 02:00:01    gas  102 #> 204 422      6 1957 1957-06-02 02:00:01    oil  102 #> 205 465      7 1957 1957-07-02 12:00:00    gas  103 #> 206 465      7 1957 1957-07-02 12:00:00    oil  103 #> 207 467      8 1957 1957-08-01 22:00:01    gas  104 #> 208 467      8 1957 1957-08-01 22:00:01    oil  104 #> 209 404      9 1957 1957-09-01 08:00:01    gas  105 #> 210 404      9 1957 1957-09-01 08:00:01    oil  105 #> 211 347     10 1957 1957-10-01 18:00:00    gas  106 #> 212 347     10 1957 1957-10-01 18:00:00    oil  106 #> 213 305     11 1957 1957-11-01 04:00:01    gas  107 #> 214 305     11 1957 1957-11-01 04:00:01    oil  107 #> 215 336     12 1957 1957-12-01 14:00:01    gas  108 #> 216 336     12 1957 1957-12-01 14:00:01    oil  108 #> 217 340      1 1958 1958-01-01 00:00:00    gas  109 #> 218 340      1 1958 1958-01-01 00:00:00    oil  109 #> 219 318      2 1958 1958-01-31 10:00:01    gas  110 #> 220 318      2 1958 1958-01-31 10:00:01    oil  110 #> 221 362      3 1958 1958-03-02 20:00:01    gas  111 #> 222 362      3 1958 1958-03-02 20:00:01    oil  111 #> 223 348      4 1958 1958-04-02 06:00:00    gas  112 #> 224 348      4 1958 1958-04-02 06:00:00    oil  112 #> 225 363      5 1958 1958-05-02 16:00:01    gas  113 #> 226 363      5 1958 1958-05-02 16:00:01    oil  113 #> 227 435      6 1958 1958-06-02 02:00:01    gas  114 #> 228 435      6 1958 1958-06-02 02:00:01    oil  114 #> 229 491      7 1958 1958-07-02 12:00:00    gas  115 #> 230 491      7 1958 1958-07-02 12:00:00    oil  115 #> 231 505      8 1958 1958-08-01 22:00:01    gas  116 #> 232 505      8 1958 1958-08-01 22:00:01    oil  116 #> 233 404      9 1958 1958-09-01 08:00:01    gas  117 #> 234 404      9 1958 1958-09-01 08:00:01    oil  117 #> 235 359     10 1958 1958-10-01 18:00:00    gas  118 #> 236 359     10 1958 1958-10-01 18:00:00    oil  118 #> 237 310     11 1958 1958-11-01 04:00:01    gas  119 #> 238 310     11 1958 1958-11-01 04:00:01    oil  119 #> 239 337     12 1958 1958-12-01 14:00:01    gas  120 #> 240 337     12 1958 1958-12-01 14:00:01    oil  120 #> 241 360      1 1959 1959-01-01 00:00:00    gas  121 #> 242 360      1 1959 1959-01-01 00:00:00    oil  121 #> 243 342      2 1959 1959-01-31 10:00:01    gas  122 #> 244 342      2 1959 1959-01-31 10:00:01    oil  122 #>  #> $data_test #>      y season year                date series time #> 1  406      3 1959 1959-03-02 20:00:01    gas  123 #> 2  406      3 1959 1959-03-02 20:00:01    oil  123 #> 3  396      4 1959 1959-04-02 06:00:00    gas  124 #> 4  396      4 1959 1959-04-02 06:00:00    oil  124 #> 5  420      5 1959 1959-05-02 16:00:01    gas  125 #> 6  420      5 1959 1959-05-02 16:00:01    oil  125 #> 7  472      6 1959 1959-06-02 02:00:01    gas  126 #> 8  472      6 1959 1959-06-02 02:00:01    oil  126 #> 9  548      7 1959 1959-07-02 12:00:00    gas  127 #> 10 548      7 1959 1959-07-02 12:00:00    oil  127 #> 11 559      8 1959 1959-08-01 22:00:01    gas  128 #> 12 559      8 1959 1959-08-01 22:00:01    oil  128 #> 13 463      9 1959 1959-09-01 08:00:01    gas  129 #> 14 463      9 1959 1959-09-01 08:00:01    oil  129 #> 15 407     10 1959 1959-10-01 18:00:00    gas  130 #> 16 407     10 1959 1959-10-01 18:00:00    oil  130 #> 17 362     11 1959 1959-11-01 04:00:01    gas  131 #> 18 362     11 1959 1959-11-01 04:00:01    oil  131 #> 19 405     12 1959 1959-12-01 14:00:01    gas  132 #> 20 405     12 1959 1959-12-01 14:00:01    oil  132 #> 21 417      1 1960 1960-01-01 00:00:00    gas  133 #> 22 417      1 1960 1960-01-01 00:00:00    oil  133 #> 23 391      2 1960 1960-01-31 12:00:01    gas  134 #> 24 391      2 1960 1960-01-31 12:00:01    oil  134 #> 25 419      3 1960 1960-03-02 00:00:01    gas  135 #> 26 419      3 1960 1960-03-02 00:00:01    oil  135 #> 27 461      4 1960 1960-04-01 12:00:00    gas  136 #> 28 461      4 1960 1960-04-01 12:00:00    oil  136 #> 29 472      5 1960 1960-05-02 00:00:01    gas  137 #> 30 472      5 1960 1960-05-02 00:00:01    oil  137 #> 31 535      6 1960 1960-06-01 12:00:01    gas  138 #> 32 535      6 1960 1960-06-01 12:00:01    oil  138 #> 33 622      7 1960 1960-07-02 00:00:00    gas  139 #> 34 622      7 1960 1960-07-02 00:00:00    oil  139 #> 35 606      8 1960 1960-08-01 12:00:01    gas  140 #> 36 606      8 1960 1960-08-01 12:00:01    oil  140 #> 37 508      9 1960 1960-09-01 00:00:01    gas  141 #> 38 508      9 1960 1960-09-01 00:00:01    oil  141 #> 39 461     10 1960 1960-10-01 12:00:00    gas  142 #> 40 461     10 1960 1960-10-01 12:00:00    oil  142 #> 41 390     11 1960 1960-11-01 00:00:01    gas  143 #> 42 390     11 1960 1960-11-01 00:00:01    oil  143 #> 43 432     12 1960 1960-12-01 12:00:01    gas  144 #> 44 432     12 1960 1960-12-01 12:00:01    oil  144 #>"},{"path":"https://nicholasjclark.github.io/mvgam/reference/sim_mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a set of discrete time series for mvgam modelling — sim_mvgam","title":"Simulate a set of discrete time series for mvgam modelling — sim_mvgam","text":"function simulates discrete time series data fitting multivariate GAM includes shared seasonality dependence state-space latent dynamic factors. Random dependencies among series, .e. correlations long-term trends, included form correlated loadings latent dynamic factors","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/sim_mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a set of discrete time series for mvgam modelling — sim_mvgam","text":"","code":"sim_mvgam(   T = 100,   n_series = 3,   seasonality = \"shared\",   use_lv = FALSE,   n_lv = 1,   trend_model = \"RW\",   drift = FALSE,   trend_rel = 0.2,   freq = 12,   family = poisson(),   phi,   shape,   sigma,   nu,   mu,   prop_missing = 0,   train_prop = 0.85 )"},{"path":"https://nicholasjclark.github.io/mvgam/reference/sim_mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a set of discrete time series for mvgam modelling — sim_mvgam","text":"T integer. Number observations (timepoints) n_series integer. Number discrete time series seasonality character. Either shared, meaning series share exact seasonal pattern, hierarchical, meaning global seasonality series' pattern can deviate slightly use_lv logical. TRUE, use dynamic factors estimate series' latent trends reduced dimension format. FALSE, estimate independent latent trends series n_lv integer. Number latent dynamic factors generating series' trends trend_model character specifying time series dynamics latent trends. Options : 'RW' (random walk possible drift), 'AR1' (AR1 model intercept), 'AR2' (AR2 model intercept) 'AR3' (AR3 model intercept) 'VAR1' (possible drift; available Stan) 'GP' (Gaussian process squared exponential kernel drift logical, simulate drift term trend trend_rel numeric. Relative importance trend series. 0 1 freq integer. seasonal frequency series family family specifying exponential observation family series. Currently supported families : nb(), poisson(), tweedie(), gaussian(), betar(), lognormal(), student_t() Gamma() phi vector dispersion parameters series (.e. size Negative Binomial phi Tweedie Beta). length(phi) < n_series, first element phi replicated n_series times. Defaults 5 Negative Binomial Tweedie; 10 Beta shape vector shape parameters series (.e. shape Gamma) length(shape) < n_series, first element shape replicated n_series times. Defaults 10 sigma vector scale parameters series (.e. sd Normal Student-T, log(sd) LogNormal). length(sigma) < n_series, first element sigma replicated n_series times. Defaults 0.5 Normal Student-T; 0.2 Lognormal nu vector degrees freedom parameters series (.e. nu Student-T) length(nu) < n_series, first element nu replicated n_series times. Defaults 3 mu vector location parameters series. length(mu) < n_series, first element mu replicated n_series times. Defaults small random values -0.5 0.5 link scale prop_missing numeric stating proportion observations missing. 0 0.8, inclusive train_prop numeric stating proportion data use training. 0.25 0.75","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/sim_mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a set of discrete time series for mvgam modelling — sim_mvgam","text":"list object containing outputs needed mvgam, including 'data_train' 'data_test', well additional information simulated seasonality trend dependencies","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/summary.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a fitted mvgam object — summary.mvgam","title":"Summary for a fitted mvgam object — summary.mvgam","text":"functions take fitted mvgam object return various useful summaries","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/summary.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a fitted mvgam object — summary.mvgam","text":"","code":"# S3 method for mvgam summary(object)  # S3 method for mvgam_prefit summary(object)  # S3 method for mvgam coef(object, summarise = TRUE)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/summary.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a fitted mvgam object — summary.mvgam","text":"object list object returned mvgam summarise logical. Summaries coefficients returned TRUE. Otherwise full posterior distribution returned","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/summary.mvgam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a fitted mvgam object — summary.mvgam","text":"summary.mvgam summary.mvgam_prefit, Aalist printed -screen showing summaries model coef.mvgam, either matrix posterior coefficient distributions (summarise == FALSE data.frame coefficient summaries)","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/summary.mvgam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary for a fitted mvgam object — summary.mvgam","text":"summary.mvgam summary.mvgam_prefit return brief summaries model's call printed, along posterior intervals key parameters model. Note smooths extra penalties null space, summaries rho parameters may include penalty terms number smooths original model formula. coef.mvgam returns either summaries full posterior estimates GAM component coefficients","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/summary.mvgam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary for a fitted mvgam object — summary.mvgam","text":"Nicholas J Clark","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/update.mvgam.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an existing mvgam object — update.mvgam","title":"Update an existing mvgam object — update.mvgam","text":"function allows previously fitted mvgam model updated","code":""},{"path":"https://nicholasjclark.github.io/mvgam/reference/update.mvgam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an existing mvgam object — update.mvgam","text":"","code":"# S3 method for mvgam update(object, formula, data, newdata, trend_model, use_lv, n_lv, family, ...)"},{"path":"https://nicholasjclark.github.io/mvgam/reference/update.mvgam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an existing mvgam object — update.mvgam","text":"formula new formula object. Note, mvgam currently support dynamic formula updates removal specific terms - term. updating, entire formula needs supplied data dataframe list containing model response variable covariates required GAM formula. include columns: 'series' (character factor index series IDs) 'time' (numeric index time point observation). variables included linear predictor formula must also present newdata Optional dataframe list test data containing least 'series' 'time' addition variables included linear predictor formula. included, observations variable y set NA fitting model posterior simulations can obtained ... arguments passed mvgam","code":""}]
