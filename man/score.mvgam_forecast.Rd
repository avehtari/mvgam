% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/score.mvgam_forecast.R
\name{score.mvgam_forecast}
\alias{score.mvgam_forecast}
\alias{score}
\title{Compute probabilistic forecast scores for mvgam objects}
\usage{
\method{score}{mvgam_forecast}(object, score = "crps", log = FALSE, weights, interval_width = 0.9, ...)

score(object, ...)
}
\arguments{
\item{object}{\code{mvgam_forecast} object. See \code{\link[=forecast.mvgam]{forecast.mvgam()}}.}

\item{score}{\code{character} specifying the type of ranked probability score to use for evaluation. Options are:
\code{variogram}, \code{drps} or \code{crps}}

\item{log}{\code{logical}. Should the forecasts and truths be logged prior to scoring?
This is often appropriate for comparing
performance of models when series vary in their observation ranges}

\item{weights}{optional \code{vector} of weights (where \code{length(weights) == n_series})
for weighting pairwise correlations when evaluating the variogram score for multivariate
forecasts. Useful for down-weighting series that have larger magnitude observations or that
are of less interest when forecasting. Ignored if \code{score != 'variogram'}}

\item{interval_width}{proportional value on \verb{[0.05,0.95]} defining the forecast interval
for calculating coverage}

\item{...}{Ignored}
}
\value{
a \code{list} containing scores and 90\% interval coverages per forecast horizon.
If \code{score \%in\% c('drps', 'crps')},
the list will also contain return the sum of all series-level scores per horizon. If
\code{score == 'variogram'}, no series-level scores are computed and the only score returned
will be for all series. For all scores, the \code{in_interval} column in each series-level
slot is a binary indicator of whether or not the true value was within the forecast's corresponding
posterior empirical quantiles
}
\description{
Compute probabilistic forecast scores for mvgam objects
}
\examples{
\dontrun{
#Simulate observations for three count-valued time series
data <- sim_mvgam()
#Fit a dynamic model using 'newdata' to automatically produce forecasts
mod <- mvgam(y ~ 1,
            trend_model = 'RW',
            data = data$data_train,
            newdata = data$data_test)

#Extract forecasts into a 'mvgam_forecast' object
fc <- forecast(mod)

#Score forecasts
score(fc, score = 'drps')
}
}
